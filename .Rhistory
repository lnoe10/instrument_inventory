filter(duplicate==0)
# left join, filter where there is a match, export to xlsx
lfs |> select(country, year, instrument_name) |> left_join(sources_en, by=c("year", "country")) |> filter(!is.na(source)) |>
rename(source_catalog_name = source) |>
arrange(country) |>
mutate(duplicate = ifelse(str_detect(str_to_title(instrument_name), "Lab(o|ou)r Force Survey") & str_detect(str_to_title(source_catalog_name), "Lab(o|ou)r Force Survey"),
1, 0)) |>
filter(duplicate==0)
# left join, filter where there is a match, export to xlsx
lfs |> select(country, year, instrument_name) |> left_join(sources_en, by=c("year", "country")) |> filter(!is.na(source)) |>
rename(source_catalog_name = source) |>
arrange(country) |>
mutate(duplicate = case_when(str_detect(str_to_title(instrument_name), "Lab(o|ou)r Force Survey") &
str_detect(str_to_title(source_catalog_name), "Lab(o|ou)r Force Survey") ~ 1,
str_detect(str_to_title(instrument_name), "Employment, Unemployment Survey") &
str_detect(str_to_title(source_catalog_name), "Employment, Unemployment Survey")) ~ 1) |>
filter(duplicate==0)
# left join, filter where there is a match, export to xlsx
lfs |> select(country, year, instrument_name) |> left_join(sources_en, by=c("year", "country")) |> filter(!is.na(source)) |>
rename(source_catalog_name = source) |>
arrange(country) |>
mutate(duplicate = case_when(str_detect(str_to_title(instrument_name), "Lab(o|ou)r Force Survey") &
str_detect(str_to_title(source_catalog_name), "Lab(o|ou)r Force Survey") ~ 1,
str_detect(str_to_title(instrument_name), "Employment, Unemployment Survey") &
str_detect(str_to_title(source_catalog_name), "Employment, Unemployment Survey")~ 1)) |>
filter(duplicate==0)
lfs |> select(country, year, instrument_name) |> left_join(sources_en, by=c("year", "country")) |> filter(!is.na(source)) |>
rename(source_catalog_name = source) |>
arrange(country) |>
mutate(duplicate = case_when(str_detect(str_to_title(instrument_name), "Lab(o|ou)r Force Survey") &
str_detect(str_to_title(source_catalog_name), "Lab(o|ou)r Force Survey") ~ 1,
str_detect(str_to_title(instrument_name), "Employment, Unemployment Survey") &
str_detect(str_to_title(source_catalog_name), "Employment, Unemployment Survey") ~ 1))
# left join, filter where there is a match, export to xlsx
lfs |> select(country, year, instrument_name) |> left_join(sources_en, by=c("year", "country")) |> filter(!is.na(source)) |>
rename(source_catalog_name = source) |>
arrange(country) |>
mutate(duplicate = case_when(str_detect(str_to_title(instrument_name), "Lab(o|ou)r Force Survey") &
str_detect(str_to_title(source_catalog_name), "Lab(o|ou)r Force Survey") ~ 1,
str_detect(str_to_title(instrument_name), "Employment, Unemployment Survey") &
str_detect(str_to_title(source_catalog_name), "Employment, Unemployment Survey") ~ 1,
.default = 0)) |>
filter(duplicate==0)
# left join, filter where there is a match, export to xlsx
lfs |> select(country, year, instrument_name) |> left_join(sources_en, by=c("year", "country")) |> filter(!is.na(source)) |>
rename(source_catalog_name = source) |>
arrange(country) |>
mutate(duplicate = case_when(str_detect(str_to_title(instrument_name), "Lab(o|ou)r Force Survey") &
str_detect(str_to_title(source_catalog_name), "Lab(o|ou)r Force Survey") ~ 1,
str_detect(str_to_title(instrument_name), "Employment, Unemployment Survey") &
str_detect(str_to_title(source_catalog_name), "Employment, Unemployment Survey") ~ 1,
.default = 0)) |>
filter(duplicate==0) |> View()
# left join, filter where there is a match, export to xlsx
lfs |> select(country, year, instrument_name) |> left_join(sources_en, by=c("year", "country")) |> filter(!is.na(source)) |>
rename(source_catalog_name = source) |>
arrange(country) |>
mutate(duplicate = case_when(str_detect(str_to_title(instrument_name), "Lab(o|ou)r Force Survey") &
str_detect(str_to_title(source_catalog_name), "Lab(o|ou)r Force Survey") ~ 1,
str_detect(str_to_title(instrument_name), "Employment, Unemployment Survey") &
str_detect(str_to_title(source_catalog_name), "Employment, Unemployment Survey") ~ 1,
.default = 0)) |>
filter(duplicate==0) |> select(instrument_name) |> distinct() |> pull()
# left join, filter where there is a match, export to xlsx
lfs |> select(country, year, instrument_name) |> left_join(sources_en, by=c("year", "country")) |> filter(!is.na(source)) |>
rename(source_catalog_name = source) |>
arrange(country) |>
mutate(duplicate = case_when(str_detect(str_to_title(instrument_name), "Lab(o|ou)r Force Survey") &
str_detect(str_to_title(source_catalog_name), "Lab(o|ou)r Force Survey") ~ 1,
str_detect(str_to_title(instrument_name), "Employment, Unemployment Survey") &
str_detect(str_to_title(source_catalog_name), "Employment, Unemployment Survey") ~ 1,
str_detect(str_to_title(instrument_name), "National Household Survey") &
str_detect(str_to_title(source_catalog_name), "National Household Survey") ~ 1,
str_detect(str_to_title(instrument_name), "Labor Market Panel Survey") &
str_detect(str_to_title(source_catalog_name), "Labor Market Panel Survey") ~ 1,
.default = 0)) |>
filter(duplicate==0) |> View()
# left join, filter where there is a match, export to xlsx
lfs |> select(country, year, instrument_name) |> left_join(sources_en, by=c("year", "country")) |> filter(!is.na(source)) |>
rename(source_catalog_name = source) |>
arrange(country) |>
mutate(duplicate = case_when(str_detect(str_to_title(instrument_name), "Lab(o|ou)r Force Survey") &
str_detect(str_to_title(source_catalog_name), "Lab(o|ou)r Force Survey") ~ 1,
str_detect(str_to_title(instrument_name), "Employment, Unemployment Survey") &
str_detect(str_to_title(source_catalog_name), "Employment, Unemployment Survey") ~ 1,
str_detect(str_to_title(instrument_name), "National Household Survey") &
str_detect(str_to_title(source_catalog_name), "National Household Survey") ~ 1,
str_detect(str_to_title(instrument_name), "Labor Market Panel Survey") &
str_detect(str_to_title(source_catalog_name), "Labor Market Panel Survey") ~ 1,
str_detect(str_to_title(instrument_name), "Continuous Multi-Purpose Household Survey") &
str_detect(str_to_title(source_catalog_name), "Continuous Multi-Purpose Household Survey") ~ 1,
.default = 0)) |>
filter(duplicate==0) |> View()
# left join, filter where there is a match, export to xlsx
lfs_country_yr_matches <- lfs |> select(country, year, instrument_name) |> left_join(sources_en, by=c("year", "country")) |> filter(!is.na(source)) |>
rename(source_catalog_name = source) |>
arrange(country) |>
mutate(duplicate = case_when(str_detect(str_to_title(instrument_name), "Lab(o|ou)r Force Survey") &
str_detect(str_to_title(source_catalog_name), "Lab(o|ou)r Force Survey") ~ 1,
str_detect(str_to_title(instrument_name), "Employment, Unemployment Survey") &
str_detect(str_to_title(source_catalog_name), "Employment, Unemployment Survey") ~ 1,
str_detect(str_to_title(instrument_name), "National Household Survey") &
str_detect(str_to_title(source_catalog_name), "National Household Survey") ~ 1,
str_detect(str_to_title(instrument_name), "Labor Market Panel Survey") &
str_detect(str_to_title(source_catalog_name), "Labor Market Panel Survey") ~ 1,
str_detect(str_to_title(instrument_name), "Continuous Multi-Purpose Household Survey") &
str_detect(str_to_title(source_catalog_name), "Continuous Multi-Purpose Household Survey") ~ 1,
.default = 0))
xlsx::write.xlsx(lfs_country_yr_matches, "Output/lfs_country_yr_matches.xlsx")
# export filtered and full datasets
#xlsx::write.xlsx(lfs_clean, "Output/lfs_ogdi_yrs.xlsx")
xlsx::write.xlsx(lfs, "Output/lfs.xlsx")
View(lfs_country_yr_matches)
# add surveys that did not match to a country-year combination from the API data
sources_en |> filter(!(country %in% lfs$country))
View(lfs)
View(sources_en)
#### comparing above to data from https://ilostat.ilo.org/data/national-sources-catalogue/ ####
sources_en <- read_csv("~/Documents/ODW/sources_en.csv", show_col_types = F) |> filter(`Source type`=="Labour force survey")
# separating rows on years b/c a number have multiple years
sources_en <- sources_en |> select(country = Country, source = Source, `Latest period available`) |>
mutate(year = ifelse(str_detect(`Latest period available`, ", "),
str_extract(`Latest period available`, "(?<=, )\\d{4}"),
str_extract(`Latest period available`, "^\\d{4}")),
iso3c = countrycode::countrycode(country, "country.name", "iso3c"),
iso3c = case_when(country == "Kosovo" ~ "XKX", country == "Netherlands Antilles" ~ "ANT", TRUE ~ iso3c)) |>
select(-`Latest period available`)
# add surveys that did not match to a country-year combination from the API data
sources_en |> filter(!(iso3c %in% lfs$iso3c))
# add surveys that did not match to a country-year combination from the API data
sources_en |> filter(!(iso3c %in% lfs$iso3c)) |> bind_rows(lfs)
setdiff(sources_en |> select(iso3c, year), lfs |> select(iso3c, year))
124+65
lfs |> bind_rows(sources_en |> filter(!(iso3c %in% lfs$iso3c)))
# add surveys that did not match to countries found in the API data
lfs_all <- lfs |> bind_rows(sources_en |> filter(!(iso3c %in% lfs$iso3c)))
# filter remaining source catalogue data
sources_en |> filter(iso3c %in% lfs$iso3c)
sources_en |> filter(!(iso3c %in% lfs$iso3c)
)
146+41
lfs_country_yr_matches
# filter remaining source catalogue data
sources_en |> filter(iso3c %in% lfs$iso3c) |> left_join(lfs_country_yr_matches, by=c("country", "year", "source" = "source_catalog_name"))
sources_en
# filter remaining source catalogue data
sources_en |> filter(iso3c %in% lfs$iso3c) |> left_join(lfs_country_yr_matches, by=c("country", "year", "source" = "source_catalog_name"))
# filter remaining source catalogue data
sources_en |> filter(iso3c %in% lfs$iso3c) |> left_join(lfs_country_yr_matches |> select(-instrument_name), by=c("country", "year", "source" = "source_catalog_name"))
# filter remaining source catalogue data
sources_en |> filter(iso3c %in% lfs$iso3c) |> left_join(lfs_country_yr_matches |> select(-instrument_name), by=c("country", "year", "source" = "source_catalog_name")) |> View()
# filter remaining source catalogue data
sources_en |> filter(iso3c %in% lfs$iso3c) |> left_join(lfs_country_yr_matches |> select(-instrument_name) |> rename(source=source_catalog_name),
by=c("country", "year", "source"))
sources_en |> filter(iso3c %in% lfs$iso3c & country=="Lithuania")
lfs_country_yr_matches |> filter(country=="Lithuania")
# filter remaining source catalogue data
sources_en |> filter(iso3c %in% lfs$iso3c) |> left_join(lfs_country_yr_matches |> select(-instrument_name) |> rename(source=source_catalog_name) |> distinct(),
by=c("country", "year", "source"))
# filter remaining source catalogue data
sources_en |> filter(iso3c %in% lfs$iso3c) |> left_join(lfs_country_yr_matches |> select(-instrument_name) |>
rename(source=source_catalog_name) |> distinct(),
by=c("country", "year", "source")) |>
filter(is.na(duplicate))
# filter remaining source catalogue data
sources_en |> filter(iso3c %in% lfs$iso3c) |> left_join(lfs_country_yr_matches |> select(-instrument_name) |>
rename(source=source_catalog_name) |> distinct(),
by=c("country", "year", "source")) |>
filter(is.na(duplicate)) |>
View()
# filter remaining source catalogue data
sources_en |> filter(iso3c %in% lfs$iso3c) |> left_join(lfs_country_yr_matches |> select(-instrument_name) |>
rename(source=source_catalog_name) |> distinct(),
by=c("country", "year", "source")) |>
filter(is.na(duplicate)) |>
print(n=100)
setdiff(sources_en$country, lfs$country)
lfs |> select(country, year, instrument_name, iso3c) |> left_join(sources_en, by=c("year", "iso3c")) |> filter(!is.na(source)) |>
rename(source_catalog_name = source) |>
arrange(country)
lfs |> select(country, year, instrument_name, iso3c) |> left_join(sources_en, by=c("year", "iso3c")) |> filter(!is.na(source))
lfs |> select(country, year, instrument_name, iso3c) |> left_join(sources_en, by=c("year", "iso3c")) |> filter(!is.na(source)) |> filter(country.x!=country.y)
# filter remaining source catalogue data
sources_en |> filter(iso3c %in% lfs$iso3c) |> left_join(lfs_country_yr_matches |> select(-instrument_name) |>
rename(source=source_catalog_name) |> distinct(),
by=c("country", "year", "source")) |>
filter(is.na(duplicate)) |>
View()
View(lfs)
# filter remaining source catalogue data
sources_en |> filter(iso3c %in% lfs$iso3c) |> left_join(lfs_country_yr_matches |> select(-instrument_name) |>
rename(source=source_catalog_name) |> distinct(),
by=c("country", "year", "source")) |>
filter(is.na(duplicate)) |>
View()
# filter remaining source catalogue data
sources_en |> filter(iso3c %in% lfs$iso3c) |> left_join(lfs_country_yr_matches |> select(-instrument_name) |>
rename(source=source_catalog_name) |> distinct(),
by=c("country", "year", "source")) |>
filter(is.na(duplicate)) |>
select(-duplicate) %<%
bind_rows(lfs_all, .)
# filter remaining source catalogue data
sources_en |> filter(iso3c %in% lfs$iso3c) |> left_join(lfs_country_yr_matches |> select(-instrument_name) |>
rename(source=source_catalog_name) |> distinct(),
by=c("country", "year", "source")) |>
filter(is.na(duplicate)) |>
select(-duplicate) %>%
bind_rows(lfs_all, .)
View(sources_en)
sources_en
# rename variables to match LFS dataframe
sources_en <- sources_en |> rename(instrument_name = source) |> mutate(source = "https://ilostat.ilo.org/data/national-sources-catalogue/")
sources_en
# add surveys that did not match to countries found in the API data
lfs_all <- lfs |> bind_rows(sources_en |> filter(!(iso3c %in% lfs$iso3c)))
sources_en |> filter(iso3c %in% lfs$iso3c) |> left_join(lfs_country_yr_matches |> select(-instrument_name) |>
rename(instrument_name=source_catalog_name) |> distinct(),
by=c("country", "year", "instrument_name")) |>
filter(is.na(duplicate))
# filter remaining source catalogue data that had country-year combos which were not found in ILO API data, add to lfs_all
lfs_all <- sources_en |> filter(iso3c %in% lfs$iso3c) |> left_join(lfs_country_yr_matches |> select(-instrument_name) |>
rename(instrument_name=source_catalog_name) |> distinct(),
by=c("country", "year", "instrument_name")) |>
filter(is.na(duplicate)) |>
select(-duplicate) %>%
bind_rows(lfs_all, .)
View(lfs_all)
# export full dataset
xlsx::write.xlsx(lfs_all, "Output/lfs_all.xlsx")
# comparing above to data from https://ilostat.ilo.org/data/national-sources-catalogue/
sources_en <- read_csv("~/Documents/ODW/sources_en.csv", show_col_types = F) |> filter(`Source type`=="Labour force survey")
sources_en
sources_en |> select(`Source type`) |> distinct()
# taking latest year recorded
sources_en <- sources_en |> select(country = Country, source = Source, `Latest period available`, instrument_type=`Source type`) |>
mutate(year = ifelse(str_detect(`Latest period available`, ", "),
str_extract(`Latest period available`, "(?<=, )\\d{4}"),
str_extract(`Latest period available`, "^\\d{4}")),
iso3c = countrycode::countrycode(country, "country.name", "iso3c"),
iso3c = case_when(country == "Kosovo" ~ "XKX", country == "Netherlands Antilles" ~ "ANT", TRUE ~ iso3c)) |>
select(-`Latest period available`)
# rename variables to match LFS dataframe
sources_en <- sources_en |> rename(instrument_name = source) |> mutate(source = "https://ilostat.ilo.org/data/national-sources-catalogue/")
# add surveys that did not match to countries found in the API data
lfs_all <- lfs |> bind_rows(sources_en |> filter(!(iso3c %in% lfs$iso3c)))
# filter remaining source catalogue data that had country-year combos which were not found in ILO API data, add to lfs_all
lfs_all <- sources_en |> filter(iso3c %in% lfs$iso3c) |> left_join(lfs_country_yr_matches |> select(-instrument_name) |>
rename(instrument_name=source_catalog_name) |> distinct(),
by=c("country", "year", "instrument_name")) |>
filter(is.na(duplicate)) |>
select(-duplicate) %>%
bind_rows(lfs_all, .)
View(lfs_all)
# export full dataset
xlsx::write.xlsx(lfs_all, "Output/lfs_all.xlsx")
library(readr)
ag_survey_study_info_LN <- read_csv("~/Downloads/ag_survey_study_info_LN.csv")
View(ag_survey_study_info_LN)
library(readr)
dataset <- read_csv(NULL)
library(readxl)
ihsn_2013_2022 <- read_excel("Output/instrument_data_ogdi_years/ihsn_2013-2022.xlsx")
View(ihsn_2013_2022)
library(tidyverse)
ihsn_2013_2022 |> select(data_kind, study_type) |> distinct()
ihsn_2013_2022 |> group_by(data_kind, study_type) |> summarise(n=n())
ihsn <- read_excel("Output/instrument_data_all_years/ihsn.xlsx")
ihsn|> group_by(data_kind, study_type) |> summarise(n=n())
ihsn_2013_2022 |> group_by(data_kind, study_type) |> summarise(n=n()) |> View()
ihsn_2013_2022 |> group_by(data_kind, study_type) |> summarise(n=n()) |> filter(is.na(data_kind) | is.na(study_type))
ihsn_2013_2022 |> group_by(data_kind, study_type) |> summarise(n=n()) |> filter(is.na(data_kind) | is.na(study_type)) |> View()
read_csv("Output/misc_data/ag_survey_study_info_LN.csv", show_col_types = F)
# import ag survey filtering from Lorenz
ag_filter_info <- read_csv("Output/misc_data/ag_survey_study_info_LN.csv", show_col_types = F) |> select(study_type:keep)
ag_filter_info
# First get data from API
agri_survey_raw <- fromJSON(content(GET("https://microdata.fao.org/index.php/api/catalog/search?ps=10000"), "text"), flatten = TRUE)$result$rows %>%
as_tibble() %>%
mutate(api_call = str_c("https://microdata.fao.org/index.php/api/catalog/", id, "?id_format=id"))
library(httr)
library(jsonlite)
library(tidyverse)
# First get data from API
agri_survey_raw <- fromJSON(content(GET("https://microdata.fao.org/index.php/api/catalog/search?ps=10000"), "text"), flatten = TRUE)$result$rows %>%
as_tibble() %>%
mutate(api_call = str_c("https://microdata.fao.org/index.php/api/catalog/", id, "?id_format=id"))
# Load study descriptions from saved file
all_fao_metadata <- readRDS("Input/fao_ag_survey_metadata.rds")
# Set up final list of Agricultural Surveys
agri_survey <- agri_survey_raw %>%
left_join(all_fao_metadata, by="id") |>
mutate(year_end = as.numeric(year_end),
iso3c = countrycode::countrycode(nation, "country.name", "iso3c"),
instrument_type = "Agricultural Survey/Census",
status = "completed",
source = "https://microdata.fao.org/index.php/catalog") %>%
# Filter for study type and repositories
# Add AGRISurvey info from Tawheeda and LSMS+ Ag modules
bind_rows(tribble(
~title, ~nation, ~iso3c, ~year_end, ~instrument_type, ~status, ~source, ~study_type, ~repositoryid,
"Encuesta Nacional Agropecuaria", "Costa Rica", "CRI", 2019, "Agricultural Survey/Census", "Completed", "http://www.fao.org/documents/card/en/c/cb3976en", "Agriculture Integrated Survey[AGRISurvey]", "agriculture-census-surveys",
"AGRISurvey Nation-wide", "Nepal", "NPL", 2020, "Agricultural Survey/Census", "Completed", "http://www.fao.org/in-action/agrisurvey/country-work/nepal/en/", "Agriculture Integrated Survey[AGRISurvey]", "agriculture-census-surveys",
"Annual Agricultural Survey 2019-2020", "Senegal", "SEN", 2020, "Agricultural Survey/Census", "Completed", "http://www.fao.org/in-action/agrisurvey/country-work/senegal/en/", "Agriculture Integrated Survey[AGRISurvey]", "agriculture-census-surveys",
"National Panel Survey, 2019-2020", "Uganda", "UGA", 2020, "Agricultural Survey/Census", "Completed", "https://www.worldbank.org/en/programs/lsms/initiatives/lsms-ISA#46", "Living Standards Measurement Study [hh/lsms]", "agriculture-census-surveys"
)) %>%
filter(repositoryid == "agriculture-census-surveys",
!study_type %in% c("Administrative Records", "Agricultural Census [ag/census]", "Enterprise Census [en/census]", "Population and Housing Census [hh/popcen]"),
!str_detect(title, "mpact|roduction")) %>%
select(id, country = nation, iso3c, year = year_end, instrument_name = title, repositoryid, instrument_type, status, source, authoring_entity,
study_type, unit_of_analysis, data_kind, universe, producers, authoring_entity_detail, funding_agencies)
ag_filter_info
left_join(agri_survey, ag_filter_info, by = c("study_type", "unit_of_analysis"))
# import ag survey filtering from Lorenz
ag_filter_info <- read_csv("Output/misc_data/ag_survey_study_info_LN.csv", show_col_types = F) |> select(study_type:keep, -n)
left_join(agri_survey, ag_filter_info, by = c("study_type", "unit_of_analysis"))
left_join(agri_survey, ag_filter_info, by = c("study_type", "unit_of_analysis")) |> filter(keep==1)
ag_survey_study_info_LN |> filter(keep==0)
ag_survey_study_info_LN |> filter(keep==0) |> summarise(sum(n))
168+180
# merge above with survey df, filter for those where keep = 1
agri_survey_filtered <- left_join(agri_survey, ag_filter_info, by = c("study_type", "unit_of_analysis")) |> filter(keep==1)
# export filtered and full dataset
xlsx::write.xlsx(agri_survey_filtered, "Output/ag_surveys.xlsx")
ag_survey <- readxl::read_xlsx("Output/instrument_data_all_years/ag_surveys.xlsx")
ag_survey <- readxl::read_xlsx("Output/instrument_data_all_years/ag_surveys.xlsx")
ag_survey |> filter(year>=2013 & year<=2022)
agri_survey_clean <- ag_survey |> filter(year>=2013 & year<=2022) |> select(-`...1`)
xlsx::write.xlsx(as.data.frame(agri_survey_clean), "Output/instrument_data_ogdi_years/ag_surveys_2013-2022.xlsx", row.names = FALSE)
# scrape data from API
lsms_raw <- fromJSON(content(GET("https://microdata.worldbank.org/index.php/api/catalog/search?ps=10000"), "text"))$result$rows %>%
as_tibble() %>%
mutate(api_call = str_c("https://microdata.worldbank.org/index.php/api/catalog/", id, "?id_format=id"))
# Load study descriptions from saved file
all_wb_metadata <- readRDS("Input/all_wb_metadata.rds")
# Set up final list of LSMS/HIES
lsms <- lsms_raw %>%
# Duplicate Serbia and Montenegro and assign to Serbia and Montenegro respectively
filter(nation != "Serbia and Montenegro") %>%
bind_rows(
lsms_raw %>%
filter(str_detect(nation, "Serbia and Montenegro")) %>%
uncount(2, .id = "id") %>%
mutate(nation = case_when(
id == 1 ~ "Serbia",
TRUE ~ "Montenegro"
)) %>%
select(-id)
) %>%
mutate(year = as.numeric(str_extract(idno, "[0-9]{4}")),
year = case_when(nation == "Malawi" & year == 2010 ~ as.numeric(year_end), TRUE ~ year),
# Create iso3 code variable.
# A lot of warnings will pop up for some surveys done in multiple countries.
# Ok to keep, we'll filter on study_type and then only merge IDA countries anyway conducted in that country only
iso3c = countrycode::countrycode(nation, "country.name", "iso3c"),
iso3c = case_when(nation == "Kosovo" ~ "XKX", TRUE ~ iso3c),
instrument_type = "HIES",
status = "completed",
source = "https://microdata.worldbank.org/index.php/catalog/lsms") %>%
# Merge in study type description
left_join(all_wb_metadata, by="id") %>%
# Filter for correct repository (lsms) and add survey types
filter(repositoryid %in% c("lsms") | study_type %in% c("Income/Expenditure/Household Survey [hh/ies]",
"Living Standards Measurement Study",
"Living Standards Measurement Study [hh/lsms]",
"Socio-Economic/Monitoring Survey [hh/sems]",
"Income/Expenditure/Household Survey",
"Socio-Economic/Monitoring Survey",
"Core Welfare Indicators Questionnaire [hh/cwiq]")) %>%
# Keep relevant variables
select(id, idno, country = nation, iso3c, year, instrument_name = title, instrument_type, status, source, study_type, authoring_entity, repositoryid, data_kind, unit_of_analysis, authoring_entity_detail)
# API call, add additional variables
ilo_hies <- fromJSON(content(GET("https://www.ilo.org/surveyLib/index.php/api/catalog",
query = list(ps=10000, repo="HIES")), "text"))$result$rows |>
as_tibble() |>
mutate(iso3c = countrycode::countrycode(nation, "country.name", "iso3c"),
iso3c = case_when(nation == "Kosovo" ~ "XKX", TRUE ~ iso3c),
status="completed",
source="https://www.ilo.org/surveyLib/index.php/api/catalog",
instrument_type = "HIES") |>
# filter for OGDI years (2012/13-present)
rename(year = year_end) |>
filter(year >= 2013) |>
mutate(year = as.numeric(year)) |>
select(id, idno, instrument_name = title, country=nation, iso3c, instrument_type, year, repo_title, repositoryid, type, authoring_entity, status, source)
# extract beginning of IDNO for both to merge on
lsms <- lsms |> mutate(short_idno = str_extract(idno, ".+?(?=_(v|V)\\d)"))
ilo_hies <- ilo_hies |> mutate(short_idno = str_extract(idno, ".+(?=_(v|V)\\d)"))
# look at overlap by short id
lsms |> select(id, short_idno, instrument_name, country, year, authoring_entity) |>
left_join(ilo_hies |> select(id, instrument_name, country, short_idno, year, authoring_entity), by=c("short_idno", "year", "country")) |>
filter(!is.na(id.y) & instrument_name.x!=instrument_name.y) |>
select(country, year, instrument_name_lsms = instrument_name.x, instrument_name_ilo = instrument_name.y, authoring_entity_lsms = authoring_entity.x, authoring_entity_ilo=authoring_entity.y)
# overlap by shortid with same instrument name
shortidno_overlap <- lsms |> select(id, short_idno, instrument_name, country, year) |>
left_join(ilo_hies |> select(id, instrument_name, country, short_idno, year), by=c("short_idno", "year", "country")) |>
filter(!is.na(id.y) & instrument_name.x==instrument_name.y) |>
pull(short_idno)
shortidno_overlap
# look at countries that have data in ILO but not LSMS
ilo_countries <- setdiff(ilo_hies$iso3c, lsms$iso3c)
# grab ILO data for those countries not in LSMS, and bind together in new HIES dataset
hies_all <- ilo_hies |> filter(iso3c %in% ilo_countries) |>
mutate(id = as.numeric(id)) |>
bind_rows(lsms)
# filter ilo dataframe for those remaining for manual checking
ilo_hies_filtered <- ilo_hies |> filter(!(iso3c %in% ilo_countries) & !(short_idno %in% shortidno_overlap))
# export to do assessment manually on google sheets
ilo_hies_filtered |> select(id, idno, country, year, instrument_name, instrument_type, repositoryid, authoring_entity)
lsms
ilo_hies_filtered |> select(id_ilo, country, year, instrument_name_ilo=instrument_name, instrument_type_ilo=instrument_type, authoring_entity_ilo=authoring_entity)
ilo_hies_filtered |> select(id_ilo=id, country, year, instrument_name_ilo=instrument_name, instrument_type_ilo=instrument_type, authoring_entity_ilo=authoring_entity)
# export to do assessment manually on google sheets
ilo_hies_filtered |> select(id_ilo=id, country, year, instrument_name_ilo=instrument_name, instrument_type_ilo=instrument_type, authoring_entity_ilo=authoring_entity) %>%
left_join(lsms |> select(id_lsms=id, country, year, instrument_name_lsms=instrument_name, instrument_type_lsms=instrument_type, authoring_entity_lsms=authoring_entity), ., by=c("year", "country"))
# export to do assessment manually on google sheets
ilo_hies_filtered |> select(id_ilo=id, country, year, instrument_name_ilo=instrument_name, instrument_type_ilo=instrument_type, authoring_entity_ilo=authoring_entity) %>%
left_join(lsms |> select(id_lsms=id, country, year, instrument_name_lsms=instrument_name, instrument_type_lsms=instrument_type, authoring_entity_lsms=authoring_entity), ., by=c("year", "country")) |> View()
# export to do assessment manually on google sheets
ilo_hies_filtered |> select(id_ilo=id, country, year, instrument_name_ilo=instrument_name, instrument_type_ilo=instrument_type, authoring_entity_ilo=authoring_entity) %>%
left_join(lsms |> select(id_lsms=id, country, year, instrument_name_lsms=instrument_name, instrument_type_lsms=instrument_type, authoring_entity_lsms=authoring_entity), ., by=c("year", "country")) |>
select(id_ilo, id_lsms, country, year, instrument_name_ilo, instrument_name_lsms,
instrument_type_ilo, instrument_type_lsms, authoring_entity_ilo, authoring_entity_lsms)
# export to do assessment manually on google sheets
ilo_hies_filtered |> select(id_ilo=id, country, year, instrument_name_ilo=instrument_name, instrument_type_ilo=instrument_type, authoring_entity_ilo=authoring_entity) %>%
left_join(lsms |> select(id_lsms=id, country, year, instrument_name_lsms=instrument_name, instrument_type_lsms=instrument_type, authoring_entity_lsms=authoring_entity), ., by=c("year", "country")) |>
select(id_ilo, id_lsms, country, year, instrument_name_ilo, instrument_name_lsms,
instrument_type_ilo, instrument_type_lsms, authoring_entity_ilo, authoring_entity_lsms) |>
mutate(country_yr_match = ifelse(!is.na(id_lsms) & !is.na(id_ilo), 1, 0))
# export to do assessment manually on google sheets
ilo_hies_filtered_new <- ilo_hies_filtered |> select(id_ilo=id, country, year, instrument_name_ilo=instrument_name, instrument_type_ilo=instrument_type, authoring_entity_ilo=authoring_entity) %>%
left_join(lsms |> select(id_lsms=id, country, year, instrument_name_lsms=instrument_name, instrument_type_lsms=instrument_type, authoring_entity_lsms=authoring_entity), ., by=c("year", "country")) |>
select(id_ilo, id_lsms, country, year, instrument_name_ilo, instrument_name_lsms,
instrument_type_ilo, instrument_type_lsms, authoring_entity_ilo, authoring_entity_lsms) |>
mutate(country_yr_match = ifelse(!is.na(id_lsms) & !is.na(id_ilo), 1, 0))
readxl::read_xlsx("Output/misc_data/hies_additional_ilo_data_checked.xlsx")
readxl::read_xlsx("Output/misc_data/hies_additional_ilo_data_checked.xlsx") |>
select(id, instrument_name, `name diff from LSMS data?`:possible_duplicate)
readxl::read_xlsx("Output/misc_data/hies_additional_ilo_data_checked.xlsx") |>
select(id, instrument_name, `name diff from LSMS data?`:possible_duplicate) %>%
left_join(ilo_hies_filtered_new, ., by=c("id_ilo" = "id", "instrument_name_ilo" = "instrument_name"))
readxl::read_xlsx("Output/misc_data/hies_additional_ilo_data_checked.xlsx") |>
select(id, instrument_name, `name diff from LSMS data?`:possible_duplicate) %>%
left_join(ilo_hies_filtered_new, ., by=c("id_ilo" = "id", "instrument_name_ilo" = "instrument_name")) |>
filter(!is.na(`name diff from LSMS data?`))
readxl::read_xlsx("Output/misc_data/hies_additional_ilo_data_checked.xlsx") |>
select(id, instrument_name, `name diff from LSMS data?`:possible_duplicate) %>%
left_join(ilo_hies_filtered_new, ., by=c("id_ilo" = "id")) |>
filter(!is.na(`name diff from LSMS data?`))
readxl::read_xlsx("Output/misc_data/hies_additional_ilo_data_checked.xlsx") |>
select(id, instrument_name, `name diff from LSMS data?`:possible_duplicate)
View(ilo_hies_filtered_new)
readxl::read_xlsx("Output/misc_data/hies_additional_ilo_data_checked.xlsx") |>
select(id, country, instrument_name, `name diff from LSMS data?`:possible_duplicate)
###
ilo_hies_filtered |> select(id_ilo=id, country, year, instrument_name_ilo=instrument_name, instrument_type_ilo=instrument_type, authoring_entity_ilo=authoring_entity) %>%
right_join(lsms |> select(id_lsms=id, country, year, instrument_name_lsms=instrument_name, instrument_type_lsms=instrument_type, authoring_entity_lsms=authoring_entity), ., by=c("year", "country")) |>
select(id_ilo, id_lsms, country, year, instrument_name_ilo, instrument_name_lsms,
instrument_type_ilo, instrument_type_lsms, authoring_entity_ilo, authoring_entity_lsms) |>
mutate(country_yr_match = ifelse(!is.na(id_lsms) & !is.na(id_ilo), 1, 0))
###
ilo_hies_filtered |> select(id_ilo=id, country, year, instrument_name_ilo=instrument_name, instrument_type_ilo=instrument_type, authoring_entity_ilo=authoring_entity) %>%
right_join(lsms |> select(id_lsms=id, country, year, instrument_name_lsms=instrument_name, instrument_type_lsms=instrument_type, authoring_entity_lsms=authoring_entity), ., by=c("year", "country")) |>
select(id_ilo, id_lsms, country, year, instrument_name_ilo, instrument_name_lsms,
instrument_type_ilo, instrument_type_lsms, authoring_entity_ilo, authoring_entity_lsms) |>
mutate(country_yr_match = ifelse(!is.na(id_lsms) & !is.na(id_ilo), 1, 0)) |> View()
readxl::read_xlsx("Output/misc_data/hies_additional_ilo_data_checked.xlsx") |> select(id)
ids_checked <- readxl::read_xlsx("Output/misc_data/hies_additional_ilo_data_checked.xlsx") |> select(id) |> pull()
ilo_hies_filtered |> select(id_ilo=id, country, year, instrument_name_ilo=instrument_name, instrument_type_ilo=instrument_type, authoring_entity_ilo=authoring_entity) %>%
left_join(lsms |> select(id_lsms=id, country, year, instrument_name_lsms=instrument_name, instrument_type_lsms=instrument_type, authoring_entity_lsms=authoring_entity), ., by=c("year", "country")) |>
select(id_ilo, id_lsms, country, year, instrument_name_ilo, instrument_name_lsms,
instrument_type_ilo, instrument_type_lsms, authoring_entity_ilo, authoring_entity_lsms) |> filter(id_ilo %in% ids_checked)
ilo_hies_filtered |> select(id_ilo=id, country, year, instrument_name_ilo=instrument_name, instrument_type_ilo=instrument_type, authoring_entity_ilo=authoring_entity) %>%
left_join(lsms |> select(id_lsms=id, country, year, instrument_name_lsms=instrument_name, instrument_type_lsms=instrument_type, authoring_entity_lsms=authoring_entity), ., by=c("year", "country")) |>
select(id_ilo, id_lsms, country, year, instrument_name_ilo, instrument_name_lsms,
instrument_type_ilo, instrument_type_lsms, authoring_entity_ilo, authoring_entity_lsms) |> filter(id_ilo %in% ids_checked) |> View()
ilo_hies_filtered |> select(id_ilo=id, country, year, instrument_name_ilo=instrument_name, instrument_type_ilo=instrument_type, authoring_entity_ilo=authoring_entity) %>%
left_join(lsms |> select(id_lsms=id, country, year, instrument_name_lsms=instrument_name, instrument_type_lsms=instrument_type, authoring_entity_lsms=authoring_entity), ., by=c("year", "country")) |>
select(id_ilo, id_lsms, country, year, instrument_name_ilo, instrument_name_lsms,
instrument_type_ilo, instrument_type_lsms, authoring_entity_ilo, authoring_entity_lsms) |>
mutate(country_yr_match = ifelse(!is.na(id_lsms) & !is.na(id_ilo), 1, 0))
readxl::read_xlsx("Output/misc_data/hies_additional_ilo_data_checked.xlsx") |>
select(id, instrument_name, `name diff from LSMS data?`:possible_duplicate) %>%
left_join(ilo_hies_filtered_new, ., by=c("id_ilo" = "id", "instrument_name_ilo" = "instrument_name")) |>
filter(!is.na(`name diff from LSMS data?`))
readxl::read_xlsx("Output/misc_data/hies_additional_ilo_data_checked.xlsx") |>
select(id, instrument_name, `name diff from LSMS data?`:possible_duplicate) %>%
left_join(ilo_hies_filtered_new, ., by=c("id_ilo" = "id", "instrument_name_ilo" = "instrument_name")) |>
filter(!is.na(`name diff from LSMS data?`)) |> filter(!(id_no %in% ids_checked))
readxl::read_xlsx("Output/misc_data/hies_additional_ilo_data_checked.xlsx") |>
select(id, instrument_name, `name diff from LSMS data?`:possible_duplicate) %>%
left_join(ilo_hies_filtered_new, ., by=c("id_ilo" = "id", "instrument_name_ilo" = "instrument_name")) |>
filter(!is.na(`name diff from LSMS data?`)) |> filter(!(id %in% ids_checked))
readxl::read_xlsx("Output/misc_data/hies_additional_ilo_data_checked.xlsx") |>
select(id, instrument_name, `name diff from LSMS data?`:possible_duplicate) %>%
left_join(ilo_hies_filtered_new, ., by=c("id_ilo" = "id", "instrument_name_ilo" = "instrument_name")) |>
filter(!is.na(`name diff from LSMS data?`)) |> filter(!(id_ilo %in% ids_checked))
readxl::read_xlsx("Output/misc_data/hies_additional_ilo_data_checked.xlsx") |>
select(id, instrument_name, `name diff from LSMS data?`:possible_duplicate) %>%
left_join(ilo_hies_filtered_new, ., by=c("id_ilo" = "id", "instrument_name_ilo" = "instrument_name")) |>
filter(!is.na(`name diff from LSMS data?`))
# read in checked dataframe with my classification/notes, merge so we have LSMS and ILO data
readxl::read_xlsx("Output/misc_data/hies_additional_ilo_data_checked.xlsx") |>
select(id, instrument_name, `name diff from LSMS data?`:possible_duplicate) %>%
left_join(ilo_hies_filtered_new, ., by=c("id_ilo" = "id", "instrument_name_ilo" = "instrument_name")) |>
filter(!is.na(`name diff from LSMS data?`))
# read in checked dataframe with my classification/notes, merge so we have LSMS and ILO data
readxl::read_xlsx("Output/misc_data/hies_additional_ilo_data_checked.xlsx") |>
select(id, instrument_name, `name diff from LSMS data?`:possible_duplicate) %>%
left_join(ilo_hies_filtered_new, ., by=c("id_ilo" = "id", "instrument_name_ilo" = "instrument_name")) |>
filter(!is.na(`name diff from LSMS data?`)) |>
write_csv("Output/misc_data/hies_country_yr_matches.csv")
