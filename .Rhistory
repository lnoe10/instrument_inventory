str_detect(instrument_name, "Round ") ~ str_extract(instrument_name, "Round \\d{1,2}"),
.default = NA))
filtered_instruments_df |>
mutate(wave_or_round = case_when(str_detect(instrument_name, "Waves ") ~ str_extract(instrument_name, "Waves \\d( and |-)\\d"),
str_detect(instrument_name, "Wave ") ~ str_extract(instrument_name, "Wave \\d"),
str_detect(instrument_name, "Rounds ") ~ str_extract(instrument_name, "Rounds \\d-\\d"),
str_detect(instrument_name, "Round ") ~ str_extract(instrument_name, "Round \\d{1,2}"),
.default = NA)) |> select(country:instrument_type, wave_or_round)
filtered_instruments_df |>
mutate(wave_or_round = case_when(str_detect(instrument_name, "Waves ") ~ str_extract(instrument_name, "Waves \\d( and |-)\\d"),
str_detect(instrument_name, "Wave ") ~ str_extract(instrument_name, "Wave \\d"),
str_detect(instrument_name, "Rounds ") ~ str_extract(instrument_name, "Rounds \\d-\\d"),
str_detect(instrument_name, "Round ") ~ str_extract(instrument_name, "Round \\d{1,2}"),
.default = NA)) |> select(country:instrument_type, wave_or_round) |> filter(!is.na(wave_or_round))
filtered_instruments_df |>
mutate(wave_or_round = case_when(str_detect(instrument_name, "Waves ") ~ str_extract(instrument_name, "Waves \\d( and |-)\\d"),
str_detect(instrument_name, "Wave ") ~ str_extract(instrument_name, "Wave \\d"),
str_detect(instrument_name, "Rounds ") ~ str_extract(instrument_name, "Rounds \\d-\\d"),
str_detect(instrument_name, "Round ") ~ str_extract(instrument_name, "Round \\d{1,2}"),
.default = NA)) |> select(country:instrument_type, wave_or_round) |> filter(!is.na(wave_or_round)) |> View()
# we need to drop rows with possible duplicates that weren't previously identified
# see - this reduces the row count by 158 instruments
filtered_instruments_df |> select(country, year, instrument_name) |> distinct()
# we need to drop rows with possible duplicates that weren't previously identified
# see - this reduces the row count by 158 instruments
filtered_instruments_df |> group_by(country) |> summarise(n=n()) |> View()
# we need to drop rows with possible duplicates that weren't previously identified
# see - this reduces the row count by 158 instruments
filtered_instruments_df |> group_by(iso3c) |> summarise(n=n()) |> View()
# we need to drop rows with possible duplicates that weren't previously identified
# see - this reduces the row count by 158 instruments
filtered_instruments_df |> filter(is.na(census_round)) |> group_by(iso3c) |> summarise(n=n()) |> View()
filtered_instruments_df |> select(year, country, instrument_name, instrument_type, keyword_flag) |> filter(!is.na(keyword_flag)) |> View()
filtered_instruments_df |> select(year, country, instrument_name, instrument_type, keyword_flag) |> filter(keyword_flag==1) |> View()
# export rows w/ keyword flag so that we can manually check and assign keep status
filtered_instruments_df |> filter(keyword_flag==1)
# export rows w/ keyword flag so that we can manually check and assign keep status
filtered_instruments_df |> filter(keyword_flag==1) |> select(country, year, instrument_name, instrument_type, keyword_flag) |> distinct()
# export rows w/ keyword flag so that we can manually check and assign keep status
filtered_instruments_df |> filter(keyword_flag==1) |>
select(country, year, instrument_name, instrument_type, keyword_flag) |>
distinct() |>
xlsx::write.xlsx("Output/misc_data/keyword_matches.xlsx")
filtered_instruments_df |>
mutate(wave_or_round = case_when(str_detect(instrument_name, "Waves ") ~ str_extract(instrument_name, "Waves \\d( and |-)\\d"),
str_detect(instrument_name, "Wave ") ~ str_extract(instrument_name, "Wave \\d"),
str_detect(instrument_name, "Rounds ") ~ str_extract(instrument_name, "Rounds \\d-\\d"),
str_detect(instrument_name, "Round ") ~ str_extract(instrument_name, "Round \\d{1,2}"),
.default = NA)) |> filter(!is.na(wave_or_round)) |> select(instrument_name) |> distinct()
filtered_instruments_df |>
mutate(wave_or_round = case_when(str_detect(instrument_name, "Waves ") ~ str_extract(instrument_name, "Waves \\d( and |-)\\d"),
str_detect(instrument_name, "Wave ") ~ str_extract(instrument_name, "Wave \\d"),
str_detect(instrument_name, "Rounds ") ~ str_extract(instrument_name, "Rounds \\d-\\d"),
str_detect(instrument_name, "Round ") ~ str_extract(instrument_name, "Round \\d{1,2}"),
.default = NA)) |> filter(!is.na(wave_or_round)) |> select(instrument_name) |> distinct() |> View()
filtered_instruments_df |>
mutate(wave_or_round = case_when(str_detect(instrument_name, "Waves ") ~ str_extract(instrument_name, "Waves \\d( and |-)\\d"),
str_detect(instrument_name, "Wave ") ~ str_extract(instrument_name, "Wave \\d"),
str_detect(instrument_name, "Rounds ") ~ str_extract(instrument_name, "Rounds \\d-\\d"),
str_detect(instrument_name, "Round ") ~ str_extract(instrument_name, "Round \\d{1,2}"),
.default = NA)) |> filter(!is.na(wave_or_round)) |> select(instrument_name) |> distinct() |> print(n=60)
# See scraping census dates file
# Census dates scrape.R
census <- readRDS("Input/census_dates_df.rds") %>%
# Filter out where we only have housing census
filter(notes!="Housing census only."|is.na(notes)) %>%
mutate(planned = as.character(planned),
planned = case_when(
planned == 1 ~ "Planned",
TRUE ~ "Complete"
),
instrument_name = "Population Census",
instrument_type = "Census",
source = "https://unstats.un.org/unsd/demographic-social/census/censusdates/") %>%
select(country, iso3c, year, status = planned, instrument_name, instrument_type, source, census_round)
# export
census |> filter(status=="Planned" & year<=2023)
readRDS("Input/census_dates_df.rds") %>%
# Filter out where we only have housing census
filter(notes!="Housing census only."|is.na(notes)) %>%
mutate(planned = as.character(planned),
planned = case_when(
planned == 1 ~ "Planned",
TRUE ~ "Complete"
),
instrument_name = "Population Census",
instrument_type = "Census",
source = "https://unstats.un.org/unsd/demographic-social/census/censusdates/")
readRDS("Input/census_dates_df.rds") %>%
# Filter out where we only have housing census
filter(notes!="Housing census only."|is.na(notes)) %>%
mutate(planned = as.character(planned),
planned = case_when(
planned == 1 ~ "Planned",
TRUE ~ "Complete"
),
instrument_name = "Population Census",
instrument_type = "Census",
source = "https://unstats.un.org/unsd/demographic-social/census/censusdates/") %>%
select(country, iso3c, year, status = planned, instrument_name, instrument_type, source, census_round, census_date = date)
readRDS("Input/census_dates_df.rds") %>%
# Filter out where we only have housing census
filter(notes!="Housing census only."|is.na(notes)) |> select(date)
readRDS("Input/census_dates_df.rds") %>%
# Filter out where we only have housing census
filter(notes!="Housing census only."|is.na(notes)) |> select(date) |> distinct()
readRDS("Input/census_dates_df.rds") %>%
# Filter out where we only have housing census
filter(notes!="Housing census only."|is.na(notes)) |> select(date) |> distinct() |> View()
# See scraping census dates file
# Census dates scrape.R
census <- readRDS("Input/census_dates_df.rds") %>%
# Filter out where we only have housing census
filter(notes!="Housing census only."|is.na(notes)) %>%
mutate(planned = as.character(planned),
planned = case_when(
planned == 1 ~ "Planned",
TRUE ~ "Complete"
),
instrument_name = "Population Census",
instrument_type = "Census",
source = "https://unstats.un.org/unsd/demographic-social/census/censusdates/",
date = ifelse(str_detect(date, "^\\(\\d{4}\\)$"), str_remove_all(date, "\\(|\\)"), date)) %>%
select(country, iso3c, year, status = planned, instrument_name, instrument_type, source, census_round, census_date = date)
View(census)
# read in filled in spreadsheet based on what was exported above
readxl::read_xlsx("Output/misc_data/planned_censuses.xlsx")
# read in filled in spreadsheet based on what was exported above
planned_censuses <- readxl::read_xlsx("Output/misc_data/planned_censuses.xlsx")
# read in filled in spreadsheet based on what was exported above
planned_censuses <- readxl::read_xlsx("Output/misc_data/planned_censuses.xlsx") |> rename(status = status_new)
planned_censuses
# See scraping census dates file
# Census dates scrape.R
census <- readRDS("Input/census_dates_df.rds") %>%
# Filter out where we only have housing census
filter(notes!="Housing census only."|is.na(notes)) %>%
mutate(planned = as.character(planned),
planned = case_when(
planned == 1 ~ "Planned",
TRUE ~ "Complete"
),
instrument_name = "Population Census",
instrument_type = "Census",
source = "https://unstats.un.org/unsd/demographic-social/census/censusdates/",
date = ifelse(str_detect(date, "^\\(\\d{4}\\)$"), str_remove_all(date, "\\(|\\)"), date)) %>%
select(country, iso3c, year, status = planned, instrument_name, instrument_type, source, census_round, census_date = date)
# read in list of censuses which have planned status and are from the year 2023 or prior that we have manually checked for completion
# note - this came from a separate inspection of differences between the old data and the newly scraped data, where many census dates have changed
planned_censuses <- readxl::read_xlsx("Output/misc_data/planned_censuses.xlsx") |> rename(status = status_new)
planned_censuses
View(planned_censuses)
# See scraping census dates file
# Census dates scrape.R
census <- readRDS("Input/census_dates_df.rds") %>%
# Filter out where we only have housing census
filter(notes!="Housing census only."|is.na(notes)) %>%
mutate(planned = as.character(planned),
planned = case_when(
planned == 1 ~ "Planned",
TRUE ~ "Complete"
),
instrument_name = "Population Census",
instrument_type = "Census",
source = "https://unstats.un.org/unsd/demographic-social/census/censusdates/") %>%
select(country, iso3c, year, status = planned, instrument_name, instrument_type, source, census_round, census_date = date)
View(planned_censuses)
# left join on
left_join(census, planned_censuses |> select(-country), by=c(iso3c, year, date, status, census_round))
# left join on
left_join(census, planned_censuses |> select(-country), by=c("iso3c", "year", "date", "status", "census_round"))
# See scraping census dates file
# Census dates scrape.R
census <- readRDS("Input/census_dates_df.rds") %>%
# Filter out where we only have housing census
filter(notes!="Housing census only."|is.na(notes)) %>%
mutate(planned = as.character(planned),
planned = case_when(
planned == 1 ~ "Planned",
TRUE ~ "Complete"
),
instrument_name = "Population Census",
instrument_type = "Census",
source = "https://unstats.un.org/unsd/demographic-social/census/censusdates/") %>%
select(country, iso3c, year, status = planned, instrument_name, instrument_type, source, census_round,date)
# left join on
left_join(census, planned_censuses |> select(-country), by=c("iso3c", "year", "date", "status", "census_round"))
# read in list of censuses which have planned status and are from the year 2023 or prior that we have manually checked for completion
# note - this came from a separate inspection of differences between the old data and the newly scraped data, where many census dates have changed
planned_censuses <- readxl::read_xlsx("Output/misc_data/planned_censuses.xlsx") |> rename(status = status_new) |> mutate(census_round = as.character(census_round))
# left join on
left_join(census, planned_censuses |> select(-country), by=c("iso3c", "year", "date", "status", "census_round"))
# left join on
left_join(census, planned_censuses |> select(-country), by=c("iso3c", "year", "date", "status", "census_round")) |>
filter(!is.na(updated_status))
View(planned_censuses)
View(census)
# left join on
left_join(census, planned_censuses |> select(-country), by=c("iso3c", "year", "status", "census_round")) |>
filter(!is.na(updated_status))
# left join on
left_join(census, planned_censuses |> select(-country), by=c("iso3c", "year", "status", "census_round")) |>
filter(!is.na(updated_status)) |> View()
# See scraping census dates file
# Census dates scrape.R
census <- readRDS("Input/census_dates_df.rds") %>%
# Filter out where we only have housing census
filter(notes!="Housing census only."|is.na(notes)) %>%
mutate(planned = as.character(planned),
planned = case_when(
planned == 1 ~ "Planned",
TRUE ~ "Complete"
),
instrument_name = "Population Census",
instrument_type = "Census",
source = "https://unstats.un.org/unsd/demographic-social/census/censusdates/",
date = ifelse(str_detect(date, "^\\(\\d{4}\\)$"), str_remove_all(date, "\\(|\\)"), date)) %>%
select(country, iso3c, year, status = planned, instrument_name, instrument_type, source, census_round, date)
# read in list of censuses which have planned status and are from the year 2023 or prior that we have manually checked for completion
# note - this came from a separate inspection of differences between the old data and the newly scraped data, where many census dates have changed
planned_censuses <- readxl::read_xlsx("Output/misc_data/planned_censuses.xlsx") |>
rename(status = status_new) |>
mutate(census_round = as.character(census_round),
date = ifelse(str_detect(date, "^-\\d{4}$"), str_remove(date, "^-"), date))
# left join on
left_join(census, planned_censuses |> select(-country), by=c("iso3c", "year", "date", "status", "census_round")) |>
filter(!is.na(updated_status))
# left join
census_finnal <- left_join(census, planned_censuses |> select(-country), by=c("iso3c", "year", "date", "status", "census_round"))
# left join
census_final <- left_join(census, planned_censuses |> select(-country), by=c("iso3c", "year", "date", "status", "census_round"))
View(census_final)
census_final |> mutate(updatd_status = ifelse(is.na(updated_status) & !is.na(status), status, updated_status))
census_final |> mutate(updated_status = ifelse(is.na(updated_status) & !is.na(status), status, updated_status))
census_final |> mutate(updated_status = ifelse(is.na(updated_status) & !is.na(status), status, updated_status)) |>
select(-status) |> rename(status = updated_status, status_note = updated_status_note)
# See scraping census dates file
# Census dates scrape.R
census <- readRDS("Input/census_dates_df.rds") %>%
# Filter out where we only have housing census
filter(notes!="Housing census only."|is.na(notes)) %>%
mutate(planned = as.character(planned),
planned = case_when(
planned == 1 ~ "Planned",
TRUE ~ "Complete"
),
instrument_name = "Population Census",
instrument_type = "Census",
source = "https://unstats.un.org/unsd/demographic-social/census/censusdates/",
# remove parentheses for dates with just a year like (2023)-->2023
date = ifelse(str_detect(date, "^\\(\\d{4}\\)$"), str_remove_all(date, "\\(|\\)"), date)) %>%
select(country, iso3c, year, status = planned, instrument_name, instrument_type, source, census_round, date)
# read in list of censuses which have planned status and are from the year 2023 or prior that we have manually checked for completion
# note - this came from a separate inspection of differences between the old data and the newly scraped data, where many census dates have changed
planned_censuses <- readxl::read_xlsx("Output/misc_data/planned_censuses.xlsx") |>
rename(status = status_new) |>
mutate(census_round = as.character(census_round),
# remove random dash from dates with just a year for merging
date = ifelse(str_detect(date, "^-\\d{4}$"), str_remove(date, "^-"), date))
# left join
census_final <- left_join(census, planned_censuses |> select(-country), by=c("iso3c", "year", "date", "status", "census_round"))
# replace status variable with the update status data, and rename accordingly
census_final <- census_final |> mutate(updated_status = ifelse(is.na(updated_status) & !is.na(status), status, updated_status)) |>
select(-status) |> rename(status = updated_status, status_note = updated_status_note)
# export filtered and full dataset
xlsx::write.xlsx(census_final, "Output/instrument_data_all_years/census.xlsx")
mics <- readxl::read_xlsx("Output/instrument_data_all_years/mics.xlsx") |> mutate(year=as.character(year))
dhs <- readxl::read_xlsx("Output/instrument_data_all_years/dhs.xlsx") |> mutate(year=as.character(year))
lfs <- readxl::read_xlsx("Output/instrument_data_all_years/lfs_all.xlsx") |> mutate(year=as.character(year))
hies <- readxl::read_xlsx("Output/instrument_data_all_years/hies.xlsx") |> mutate(year=as.character(year))
ag_survey <- readxl::read_xlsx("Output/instrument_data_all_years/ag_surveys.xlsx") |> mutate(year=as.character(year))
ag_census <- readxl::read_xlsx("Output/instrument_data_all_years/ag_census.xlsx") |> mutate(year=as.character(year))
tus <- readxl::read_xlsx("Output/instrument_data_all_years/tus.xlsx") |> mutate(year=as.character(year))
census <- readxl::read_xlsx("Output/instrument_data_all_years/census.xlsx") |> mutate(year=as.character(year))
dhs_clean <- dhs |> filter(year>=2013 & year<=2022) |> select(-`...1`)
mics_clean <- mics |> filter(year>=2013 & year<=2022) |> select(-`...1`)
hies_clean <- hies |> filter(year>=2013 & year<=2022) |> select(-`...1`)
lfs_clean <- lfs |> filter(year>=2013 & year<=2022) |> select(-`...1`)
ag_survey_clean <- ag_survey |> filter(year>=2013 & year<=2022) |> select(-`...1`)
tus_clean <- tus |> filter(year>=2013 & year<=2022) |> select(-`...1`)
dhs_clean <- dhs |> filter(year>=2013 & year<=2022) |> select(-`...1`)
ag_census_clean <- ag_census |>
filter(census_round==2010|census_round==2020) |> select(-`...1`)
census_clean <- census |>
filter(census_round==2010|census_round==2020) |> select(-`...1`)
xlsx::write.xlsx(as.data.frame(census_clean), "Output/instrument_data_ogdi_years/census_2013-2022.xlsx", row.names = FALSE)
# combining all the FILTERED datasets, with census round variable - we will use this to look for duplicates with IHSN data
all_surveys_census_filtered <- list(dhs_clean, mics_clean, tus_clean) |>
map(~select(., country, iso3c, year, status, instrument_name, instrument_type, source)) |>
map_dfr(bind_rows) |>
bind_rows(hies_clean |> select(country, iso3c, year, status, instrument_name, instrument_type, source, idno, authoring_entity)) |>
bind_rows(lfs_clean |> select(country, iso3c, year, status, instrument_name, instrument_type, source, idno, authoring_entity)) |>
bind_rows(ag_survey_clean |> select(country, iso3c, year, status, instrument_name, instrument_type, source, authoring_entity)) |>
bind_rows(census_clean |> select(country, iso3c, year, status, instrument_name, instrument_type, source, census_round)) |>
bind_rows(ag_census_clean |> select(country, iso3c, year, status, instrument_name, instrument_type, source, census_round))
# incorporating IHSN data
# import the 2013-2022 IHSN data that Lorenz has manually classified
ihsn <- readxl::read_xlsx("Output/instrument_data_ogdi_years/ihsn_2013-2022.xlsx")
# drop "Good Growth Plan" rows as decided by Tawheeda and Lorenz
ihsn <- ihsn |> filter(!(authoring_entity=="Syngenta" & str_detect(instrument_name, "Good Growth Plan")))
# add single year variable to ihsn dataframe for consistency with others
ihsn_clean <- ihsn |> mutate(across(c(year_start, year_end), ~ as.numeric(.x))) |>
mutate(year = case_when(year_start==year_end ~ as.character(year_start),
year_start!=year_end ~ paste0(year_start, "-", year_end)))
# there are 5 rows in the all_surveys_census_filtered dataframe where a timeframe is given in the year variable
# those are all TUS, so we can inspect them manually - there are no overlaps we need to be concerned about
all_surveys_census_filtered |> filter(!str_detect(year, "^\\d{4}$")) |> select(-census_round, -source) |>
left_join(ihsn_clean |> select(country, iso3c, year_start, year_end, instrument_name_ihsn = instrument_name, instrument_type) |>
filter(instrument_type=="Time Use Survey"), by=c("iso3c", "instrument_type", "country")) |>
filter(!is.na(instrument_name_ihsn))
# read in the possible overlap file with classifications added by Lorenz and Lindsay
ihsn_possible_overlap <- readxl::read_xlsx("Output/misc_data/ihsn_possible_overlap.xlsx") |> select(-note)
# drop rows with an idno equal to one of those in the ihsn_possible_overlap df identified as a possible duplicate
ihsn_clean <- ihsn_clean |> filter(!(idno %in% c(ihsn_possible_overlap |> filter(possible_duplicate==TRUE) |> select(idno_ihsn) |> distinct() |> pull())))
# look for additional overlap through reference ID - this will let us catch duplicates that weren't identified by the merge done above
more_overlap <- left_join(all_surveys_census_filtered |> mutate(idno_caps = str_to_upper(idno)),
ihsn_clean |> mutate(idno_caps = str_to_upper(idno)) |> select(idno_caps, instrument_name, authoring_entity_detail, idno_ihsn = idno),
by="idno_caps") |> filter(!is.na(instrument_name.y)) |>
select(idno_ihsn) |> pull()
# remove the reference IDs identified above from the ihsn_clean dataframe
ihsn_clean <- ihsn_clean |> filter(!(idno %in% more_overlap))
# let's create a dataframe with all instruments data that has all possible variables
# this will help with specific instrument filtering later on
full_instruments_df <- bind_rows(dhs_clean, mics_clean, tus_clean, hies_clean |> mutate(id=as.character(id)),
lfs_clean |> mutate(year_start = as.numeric(year_start), year_end = as.numeric(year_end)),
ag_survey_clean, census_clean, ag_census_clean, ihsn_clean |> select(-keep)) |>
select(-c(keep, notes, country_original)) |> arrange(country)
# export this dataframe for later use
xlsx::write.xlsx(as.data.frame(full_instruments_df), "Output/instrument_data_ogdi_years/full_instruments_df.xlsx", row.names = FALSE)
View(full_instruments_df)
# read in full instruments df
full_instruments_df <- readxl::read_xlsx("Output/instrument_data_ogdi_years/full_instruments_df.xlsx")
# filter out all food insecurity experience scale surveys and IFAD impact assessment surveys
filtered_instruments_df <- full_instruments_df |>
filter(!str_detect(instrument_name, "Food Insecurity Experience Scale")) |>
filter(!str_detect(instrument_name, "IFAD Impact Assessment Surveys"))
# add keyword flag to identify impact evaluation surveys
# define keywords
keywords <- c("(I|i)mpact","(B|b)ase-?line","(M|m)id-?line","(E|e)nd-?line", "(E|e)vidence",
"(M|m)onitor","(A|a)ssessment", "(E|e)valuation")
# add flag for keywords
filtered_instruments_df <- filtered_instruments_df |> mutate(keyword_flag = ifelse(str_detect(instrument_name, paste0(keywords, collapse = "|")), 1, 0))
# add variable for rows with a wave or round specification by string extraction
filtered_instruments_df <- filtered_instruments_df |>
mutate(wave_or_round = case_when(str_detect(instrument_name, "Waves ") ~ str_extract(instrument_name, "Waves \\d( and |-)\\d"),
str_detect(instrument_name, "Wave ") ~ str_extract(instrument_name, "Wave \\d"),
str_detect(instrument_name, "Rounds ") ~ str_extract(instrument_name, "Rounds \\d-\\d"),
str_detect(instrument_name, "Round ") ~ str_extract(instrument_name, "Round \\d{1,2}"),
.default = NA))
# look at distinct instrument names for those with multiple waves and rounds so we can standardize instrument names without the wave # included
filtered_instruments_df |> filter(!is.na(wave_or_round)) |> select(instrument_name) |> distinct()
filtered_instruments_df |> filter(!is.na(wave_or_round))
# look at distinct instrument names for those with multiple waves and rounds so we can standardize instrument names without the wave # included
filtered_instruments_df |> filter(!is.na(wave_or_round)) |> select(country, year, instrument_name) |> distinct()
# look at distinct instrument names for those with multiple waves and rounds so we can standardize instrument names without the wave # included
filtered_instruments_df |> filter(!is.na(wave_or_round)) |> select(country, year, instrument_name) |> distinct() |>
group_by(country, year) |> filter(n()>1)
# look at distinct instrument names for those with multiple waves and rounds so we can standardize instrument names without the wave # included
filtered_instruments_df |> filter(!is.na(wave_or_round)) |> select(iso3c, year, instrument_name) |> distinct() |>
group_by(iso3c, year) |> filter(n()>1)
# look at distinct instrument names for those with multiple waves and rounds so we can standardize instrument names without the wave # included
filtered_instruments_df |> filter(!is.na(wave_or_round)) |> select(iso3c, year, instrument_name) |> distinct() |>
group_by(iso3c, year) |> filter(n()>1) |> ungroup() |> select(instrument_name) |> distinct()
# look at distinct instrument names for those with multiple waves and rounds so we can standardize instrument names without the wave # included
filtered_instruments_df |> filter(!is.na(wave_or_round)) |> select(iso3c, year, instrument_name) |> distinct() |>
group_by(iso3c, year) |> filter(n()>1) |> ungroup() |> select(instrument_name) |> distinct() |> print(n=50)
# look at distinct instrument names for those with multiple waves and rounds in the same country/year so we can standardize instrument names without the wave # included
filtered_instruments_df |> filter(!is.na(wave_or_round)) |> select(iso3c, year, instrument_name) |>
group_by(iso3c, year) |> filter(n()>1) |> ungroup() |> select(instrument_name) |> distinct()
# look at distinct instrument names for those with multiple waves and rounds in the same country/year so we can standardize instrument names without the wave # included
filtered_instruments_df |> filter(!is.na(wave_or_round)) |> select(iso3c, year, instrument_name) |> View()
# look at distinct instrument names for those with multiple waves and rounds in the same country/year so we can standardize instrument names without the wave # included
filtered_instruments_df |> filter(!is.na(wave_or_round)) |> select(country, year, instrument_name) |> View()
filtered_instruments_df |> filter(!is.na(wave_or_round)) |> select(iso3c, year, instrument_name) |>
group_by(iso3c, year) |> filter(n()>1) |> ungroup() |> View()
# look at distinct instrument names for those with multiple waves and rounds in the same country/year so we can standardize instrument names without the wave # included
filtered_instruments_df |> filter(!is.na(wave_or_round)) |> select(iso3c, year, instrument_name) |> distinct() |>
group_by(iso3c, year) |> filter(n()>1) |> ungroup() |> select(instrument_name) |> distinct()
filtered_instruments_df |> filter(!is.na(wave_or_round)) |> select(iso3c, year, instrument_name) |> distinct() |>
group_by(iso3c, year) |> filter(n()>1) |> ungroup() |> View()
# look at distinct instrument names for those with multiple waves and rounds in the same country/year so we can standardize instrument names without the wave # included
filtered_instruments_df |> filter(!is.na(wave_or_round)) |> select(iso3c, year, instrument_name) |> distinct() |>
group_by(iso3c, year) |> filter(n()>1) |> ungroup() |> select(instrument_name) |> distinct() |> print(n=50)
# create standardized instrument name by removing wave/round part of the string
filtered_instruments_df |>
mutate(name_multiple_waves = case_when(!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 LAC High Frequency Phone Surveys 2021, Wave \\d$") ~ "COVID-19 LAC High Frequency Phone Surveys 2021",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 National Panel Phone Survey - Wave 1, 2020$") ~ "COVID-19 National Panel Phone Survey 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 National Panel Phone Survey 2020,") ~ "COVID-19 National Panel Phone Survey 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 High Frequency Phone Survey of Households 2020, Round \\d$$") ~ "COVID-19 High Frequency Phone Survey of Households 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 High Frequency Phone Survey of Households 2021") ~ "COVID-19 High Frequency Phone Survey of Households 2021",
!is.na(wave_or_round) & str_detect(instrument_name, "COVID-19 National Panel Phone Survey 2021, Wave 4") ~ "COVID-19 National Panel Phone Survey 2021",
.default = NA)) |>
select(instrument_name, wave_or_round, country, year) |>
filter(!is.na(wave_or_round)) |> arrange(country, year) |>
group_by(country, year) |>
mutate(multiple_waves = ifelse(n()>1, 1, 0)) |>
filter(multiple_waves==1)
filtered_instruments_df |>
mutate(name_multiple_waves = case_when(!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 LAC High Frequency Phone Surveys 2021, Wave \\d$") ~ "COVID-19 LAC High Frequency Phone Surveys 2021",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 National Panel Phone Survey - Wave 1, 2020$") ~ "COVID-19 National Panel Phone Survey 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 National Panel Phone Survey 2020,") ~ "COVID-19 National Panel Phone Survey 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 High Frequency Phone Survey of Households 2020, Round \\d$$") ~ "COVID-19 High Frequency Phone Survey of Households 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 High Frequency Phone Survey of Households 2021") ~ "COVID-19 High Frequency Phone Survey of Households 2021",
!is.na(wave_or_round) & str_detect(instrument_name, "COVID-19 National Panel Phone Survey 2021, Wave 4") ~ "COVID-19 National Panel Phone Survey 2021",
.default = NA)) |>
select(instrument_name, wave_or_round, country, year) |>
filter(!is.na(wave_or_round)) |> arrange(country, year)
filtered_instruments_df |>
mutate(name_multiple_waves = case_when(!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 LAC High Frequency Phone Surveys 2021, Wave \\d$") ~ "COVID-19 LAC High Frequency Phone Surveys 2021",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 National Panel Phone Survey - Wave 1, 2020$") ~ "COVID-19 National Panel Phone Survey 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 National Panel Phone Survey 2020,") ~ "COVID-19 National Panel Phone Survey 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 High Frequency Phone Survey of Households 2020, Round \\d$$") ~ "COVID-19 High Frequency Phone Survey of Households 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 High Frequency Phone Survey of Households 2021") ~ "COVID-19 High Frequency Phone Survey of Households 2021",
!is.na(wave_or_round) & str_detect(instrument_name, "COVID-19 National Panel Phone Survey 2021, Wave 4") ~ "COVID-19 National Panel Phone Survey 2021",
.default = NA)) |>
select(instrument_name, name_multiple_waves, wave_or_round, country, year) |>
filter(!is.na(wave_or_round)) |> arrange(country, year)
filtered_instruments_df |>
mutate(name_multiple_waves = case_when(!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 LAC High Frequency Phone Surveys 2021, Wave \\d$") ~ "COVID-19 LAC High Frequency Phone Surveys 2021",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 National Panel Phone Survey - Wave 1, 2020$") ~ "COVID-19 National Panel Phone Survey 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 National Panel Phone Survey 2020,") ~ "COVID-19 National Panel Phone Survey 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 High Frequency Phone Survey of Households 2020, Round \\d$$") ~ "COVID-19 High Frequency Phone Survey of Households 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 High Frequency Phone Survey of Households 2021") ~ "COVID-19 High Frequency Phone Survey of Households 2021",
!is.na(wave_or_round) & str_detect(instrument_name, "COVID-19 National Panel Phone Survey 2021, Wave 4") ~ "COVID-19 National Panel Phone Survey 2021",
.default = NA)) |>
select(instrument_name, name_multiple_waves, wave_or_round, country, year) |>
filter(!is.na(name_multiple_waves)) |> arrange(country, year)
# create standardized instrument name by removing wave/round part of the string
filtered_instruments_df |>
mutate(name_multiple_waves = case_when(!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 LAC High Frequency Phone Surveys 2021, Wave \\d$") ~ "COVID-19 LAC High Frequency Phone Surveys 2021",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 National Panel Phone Survey - Wave 1, 2020$") ~ "COVID-19 National Panel Phone Survey 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 National Panel Phone Survey 2020,") ~ "COVID-19 National Panel Phone Survey 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 High Frequency Phone Survey of Households 2020, Round \\d$$") ~ "COVID-19 High Frequency Phone Survey of Households 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 High Frequency Phone Survey of Households 2021") ~ "COVID-19 High Frequency Phone Survey of Households 2021",
!is.na(wave_or_round) & str_detect(instrument_name, "COVID-19 National Panel Phone Survey 2021, Wave 4") ~ "COVID-19 National Panel Phone Survey 2021",
.default = NA)) |>
select(instrument_name, name_multiple_waves, wave_or_round, country, year) |>
filter(!is.na(name_multiple_waves)) |> arrange(country, year) |>
group_by(country, year) |>
mutate(multiple_waves = ifelse(n()>1, 1, 0)) |>
filter(multiple_waves==1)
filtered_instruments_df |>
mutate(name_multiple_waves = case_when(!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 LAC High Frequency Phone Surveys 2021, Wave \\d$") ~ "COVID-19 LAC High Frequency Phone Surveys 2021",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 National Panel Phone Survey - Wave 1, 2020$") ~ "COVID-19 National Panel Phone Survey 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 National Panel Phone Survey 2020,") ~ "COVID-19 National Panel Phone Survey 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 High Frequency Phone Survey of Households 2020, Round \\d$$") ~ "COVID-19 High Frequency Phone Survey of Households 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 High Frequency Phone Survey of Households 2021") ~ "COVID-19 High Frequency Phone Survey of Households 2021",
!is.na(wave_or_round) & str_detect(instrument_name, "COVID-19 National Panel Phone Survey 2021, Wave 4") ~ "COVID-19 National Panel Phone Survey 2021",
.default = NA)) |>
select(instrument_name, name_multiple_waves, wave_or_round, country, year) |>
filter(!is.na(name_multiple_waves)) |> arrange(country, year) |>
group_by(country, year) |>
mutate(multiple_waves = ifelse(n()>1, 1, 0))
# create standardized instrument name by removing wave/round part of the string
filtered_instruments_df |>
mutate(name_multiple_waves = case_when(!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 LAC High Frequency Phone Surveys 2021, Wave \\d$") ~ "COVID-19 LAC High Frequency Phone Surveys 2021",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 National Panel Phone Survey - Wave 1, 2020$") ~ "COVID-19 National Panel Phone Survey 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 National Panel Phone Survey 2020,") ~ "COVID-19 National Panel Phone Survey 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 High Frequency Phone Survey of Households 2020, Round \\d$$") ~ "COVID-19 High Frequency Phone Survey of Households 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 High Frequency Phone Survey of Households 2021") ~ "COVID-19 High Frequency Phone Survey of Households 2021",
!is.na(wave_or_round) & str_detect(instrument_name, "COVID-19 National Panel Phone Survey 2021, Wave 4") ~ "COVID-19 National Panel Phone Survey 2021",
.default = NA)) |>
select(instrument_name, name_multiple_waves, wave_or_round, country, year) |>
filter(!is.na(name_multiple_waves)) |> arrange(country, year) |>
group_by(country, year) |>
mutate(multiple_waves = ifelse(n()>1, 1, 0)) |>
mutate(name_multiple_waves = ifelse(multiple_waves==0, NA, name_multiple_waves))
# create standardized instrument name by removing wave/round part of the string
filtered_instruments_df |>
mutate(name_multiple_waves = case_when(!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 LAC High Frequency Phone Surveys 2021, Wave \\d$") ~ "COVID-19 LAC High Frequency Phone Surveys 2021",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 National Panel Phone Survey - Wave 1, 2020$") ~ "COVID-19 National Panel Phone Survey 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 National Panel Phone Survey 2020,") ~ "COVID-19 National Panel Phone Survey 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 High Frequency Phone Survey of Households 2020, Round \\d$$") ~ "COVID-19 High Frequency Phone Survey of Households 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 High Frequency Phone Survey of Households 2021") ~ "COVID-19 High Frequency Phone Survey of Households 2021",
!is.na(wave_or_round) & str_detect(instrument_name, "COVID-19 National Panel Phone Survey 2021, Wave 4") ~ "COVID-19 National Panel Phone Survey 2021",
.default = NA)) |>
select(instrument_name, name_multiple_waves, wave_or_round, country, year) |>
filter(!is.na(name_multiple_waves)) |> arrange(country, year) |>
group_by(country, year) |>
mutate(multiple_waves = ifelse(n()>1, 1, 0)) |>
mutate(name_multiple_waves = ifelse(multiple_waves==0, NA, name_multiple_waves)) |>
filter(!is.na(name_multiple_waves))
filtered_instruments_df |>
mutate(name_multiple_waves = case_when(!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 LAC High Frequency Phone Surveys 2021, Wave \\d$") ~ "COVID-19 LAC High Frequency Phone Surveys 2021",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 National Panel Phone Survey - Wave 1, 2020$") ~ "COVID-19 National Panel Phone Survey 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 National Panel Phone Survey 2020,") ~ "COVID-19 National Panel Phone Survey 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 High Frequency Phone Survey of Households 2020, Round \\d$$") ~ "COVID-19 High Frequency Phone Survey of Households 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 High Frequency Phone Survey of Households 2021") ~ "COVID-19 High Frequency Phone Survey of Households 2021",
!is.na(wave_or_round) & str_detect(instrument_name, "COVID-19 National Panel Phone Survey 2021, Wave 4") ~ "COVID-19 National Panel Phone Survey 2021",
.default = NA)) |>
select(instrument_name, name_multiple_waves, wave_or_round, country, year) |>
filter(!is.na(name_multiple_waves)) |> arrange(country, year) |>
group_by(country, year, name_multiple_waves) |>
mutate(multiple_waves = ifelse(n()>1, 1, 0)) |>
mutate(name_multiple_waves = ifelse(multiple_waves==0, NA, name_multiple_waves)) |>
filter(!is.na(name_multiple_waves))
# create standardized instrument name by removing wave/round part of the string
filtered_instruments_df |>
mutate(name_multiple_waves = case_when(!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 LAC High Frequency Phone Surveys 2021, Wave \\d$") ~ "COVID-19 LAC High Frequency Phone Surveys 2021",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 National Panel Phone Survey - Wave 1, 2020$") ~ "COVID-19 National Panel Phone Survey 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 National Panel Phone Survey 2020,") ~ "COVID-19 National Panel Phone Survey 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 High Frequency Phone Survey of Households 2020, Round \\d$$") ~ "COVID-19 High Frequency Phone Survey of Households 2020",
!is.na(wave_or_round) & str_detect(instrument_name, "^COVID-19 High Frequency Phone Survey of Households 2021") ~ "COVID-19 High Frequency Phone Survey of Households 2021",
!is.na(wave_or_round) & str_detect(instrument_name, "COVID-19 National Panel Phone Survey 2021, Wave 4") ~ "COVID-19 National Panel Phone Survey 2021",
.default = NA)) |>
select(instrument_name, name_multiple_waves, wave_or_round, country, year) |>
filter(!is.na(name_multiple_waves)) |> arrange(country, year) |>
group_by(country, year, name_multiple_waves) |>
mutate(multiple_waves = ifelse(n()>1, 1, 0)) |>
mutate(name_multiple_waves = ifelse(multiple_waves==0, NA, name_multiple_waves)) |>
filter(!is.na(name_multiple_waves)) |>
summarise(wave_or_round = paste0(wave_or_round, collapse = ", "))
