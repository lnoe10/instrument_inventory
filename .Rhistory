agri_survey_clean |>
mutate(household_flag = ifelse(str_detect(instrument_name, "Household|Living|Socio|Gender|Women"), TRUE, FALSE)) |>
# filter out rows for Good Growth Plan by Syngenta
filter((authoring_entity=="Syngenta" & !str_detect(instrument_name, "Good Growth Plan")) & authoring_entity!="Syngenta") |> nrow()
agri_survey_clean |>
mutate(household_flag = ifelse(str_detect(instrument_name, "Household|Living|Socio|Gender|Women"), TRUE, FALSE)) |>
# filter out rows for Good Growth Plan by Syngenta
filter((authoring_entity=="Syngenta" & !str_detect(instrument_name, "Good Growth Plan")) | authoring_entity!="Syngenta") |> nrow()
agri_survey_clean |>
mutate(household_flag = ifelse(str_detect(instrument_name, "Household|Living|Socio|Gender|Women"), TRUE, FALSE)) |>
# filter out rows for Good Growth Plan by Syngenta
filter((authoring_entity=="Syngenta" & str_detect(instrument_name, "Good Growth Plan"))) |> nrow()
agri_survey_clean |>
mutate(household_flag = ifelse(str_detect(instrument_name, "Household|Living|Socio|Gender|Women"), TRUE, FALSE)) |>
# filter out rows for Good Growth Plan by Syngenta
filter(authoring_entity!="Syngenta") |> nrow()
agri_survey_clean |>
mutate(household_flag = ifelse(str_detect(instrument_name, "Household|Living|Socio|Gender|Women"), TRUE, FALSE)) |>
# filter out rows for Good Growth Plan by Syngenta
filter((authoring_entity=="Syngenta")) |> nrow()
nrow(agri_survey_clean)-53
setdiff(agri_survey_clean |>
mutate(household_flag = ifelse(str_detect(instrument_name, "Household|Living|Socio|Gender|Women"), TRUE, FALSE)) |>
# filter out rows for Good Growth Plan by Syngenta
filter(authoring_entity!="Syngenta"), agri_survey_clean |>
mutate(household_flag = ifelse(str_detect(instrument_name, "Household|Living|Socio|Gender|Women"), TRUE, FALSE)) |>
# filter out rows for Good Growth Plan by Syngenta
filter((authoring_entity=="Syngenta")))
setdiff(agri_survey_clean |>
mutate(household_flag = ifelse(str_detect(instrument_name, "Household|Living|Socio|Gender|Women"), TRUE, FALSE)) |>
# filter out rows for Good Growth Plan by Syngenta
filter((authoring_entity=="Syngenta")), agri_survey_clean |>
mutate(household_flag = ifelse(str_detect(instrument_name, "Household|Living|Socio|Gender|Women"), TRUE, FALSE)) |>
# filter out rows for Good Growth Plan by Syngenta
filter(authoring_entity!="Syngenta"))
setdiff(agri_survey_clean |>
mutate(household_flag = ifelse(str_detect(instrument_name, "Household|Living|Socio|Gender|Women"), TRUE, FALSE)) |>
# filter out rows for Good Growth Plan by Syngenta
filter((authoring_entity=="Syngenta")), agri_survey_clean |>
mutate(household_flag = ifelse(str_detect(instrument_name, "Household|Living|Socio|Gender|Women"), TRUE, FALSE)) |>
# filter out rows for Good Growth Plan by Syngenta
filter(authoring_entity!="Syngenta")) |> View()
agri_survey_clean |>
mutate(household_flag = ifelse(str_detect(instrument_name, "Household|Living|Socio|Gender|Women"), TRUE, FALSE)) |>
# filter out rows for Good Growth Plan by Syngenta
filter((authoring_entity=="Syngenta")) |> nrow()
agri_survey_clean |>
mutate(household_flag = ifelse(str_detect(instrument_name, "Household|Living|Socio|Gender|Women"), TRUE, FALSE)) |>
# filter out rows for Good Growth Plan by Syngenta
filter(authoring_entity!="Syngenta") |> nrow()
agri_survey_clean |> nrow()
204-53
setdiff(agri_survey, agri_survey_clean |>
# filter out rows for Good Growth Plan by Syngenta
filter(authoring_entity!="Syngenta"))
setdiff(agri_survey_clean, agri_survey_clean |>
# filter out rows for Good Growth Plan by Syngenta
filter(authoring_entity!="Syngenta"))
setdiff(agri_survey_clean, agri_survey_clean |>
# filter out rows for Good Growth Plan by Syngenta
filter(authoring_entity!="Syngenta")) |> View()
agri_survey_clean |>
mutate(household_flag = ifelse(str_detect(instrument_name, "Household|Living|Socio|Gender|Women"), TRUE, FALSE)) |>
# filter out rows for Good Growth Plan by Syngenta
filter(authoring_entity!="Syngenta" | is.na(authoring_entity)) |> nrow()
agri_survey_clean <- agri_survey |> filter(year>=2013 & year<=2022)
# try to flag agricultural census/survey rows where we need further investigation
# to determine if they capture human level-data
agri_survey_clean <- agri_survey_clean |>
mutate(household_flag = ifelse(str_detect(instrument_name, "Household|Living|Socio|Gender|Women"), TRUE, FALSE)) |>
# filter out rows where authoring entity is Syngenta. Need explicitly to keep those that are missing as well
filter(authoring_entity!="Syngenta" | is.na(authoring_entity))
204-53
xlsx::write.xlsx(agri_survey_clean, "Output/agri_survey.xlsx")
View(ihsn_raw)
ihsn_clean |> select(authoring_entity) |> distinct()
ihsn_clean |> select(authoring_entity) |> distinct() |> filter(str_detect(authoring_entity, ","))
ihsn_clean |> select(authoring_entity) |> distinct() |> filter(!str_detect(authoring_entity, ","))
ihsn_clean |> select(authoring_entity) |> distinct() |> filter(!str_detect(authoring_entity, ",")) |> View()
ihsn_clean |> select(authoring_entity) |> distinct() |> filter(!str_detect(authoring_entity, ",") & str_detect(authoring_entity, "UN|United Nations|FAO|World Bank")) |> View()
View(agri_survey)
### Looking at how many rows have only one authoring entity, and it is an IGO like hte UNHCR or World Bank
ihsn_clean |> select(authoring_entity) |> distinct() |>
filter(!str_detect(authoring_entity, ",")
& str_detect(authoring_entity, "UN|United Nations|FAO|World Bank"))
lsms_clean |> select(authoring_entity) |> distinct() |>
filter(!str_detect(authoring_entity, ",")
& str_detect(authoring_entity, "UN|United Nations|FAO|World Bank"))
lsms_clean |> select(authoring_entity) |> distinct() |>
filter(!str_detect(authoring_entity, ","))
lsms_clean |> select(authoring_entity) |> distinct() |>
filter(!str_detect(authoring_entity, ",")) |> View()
lsms_clean |> filter(!str_detect(authoring_entity, ",")
& str_detect(authoring_entity, "UN|United Nations|FAO|World Bank")) |>
nrow()
ihsn_clean |> filter(!str_detect(authoring_entity, ",")
& str_detect(authoring_entity, "UN|United Nations|FAO|World Bank")) |>
nrow()
View(lfs_clean)
lfs_clean |> select(instrument_name, instrument_type, status) |> distinct()
View(agri_survey_clean)
### Looking at how many rows have only one authoring entity, and it is an IGO like hte UNHCR or World Bank
# distinct authoring entities that are only an IGO
ihsn_clean |> select(authoring_entity) |> distinct() |>
filter(!str_detect(authoring_entity, ",")
& str_detect(authoring_entity, "UN|United Nations|FAO|World Bank"))
### Looking at how many rows have only one authoring entity, and it is an IGO like hte UNHCR or World Bank
# distinct authoring entities that are only an IGO
ihsn_clean |> select(authoring_entity) |> distinct() |>
filter(!str_detect(authoring_entity, ",")
& str_detect(authoring_entity, "UN|United Nations|FAO|World Bank")) |> View()
### Looking at how many rows have only one authoring entity, and it is an IGO like hte UNHCR or World Bank
# distinct authoring entities that are only an IGO
ihsn_clean |> select(authoring_entity) |> distinct() |>
filter(!str_detect(authoring_entity, ",")) |> View()
### Looking at how many rows have only one authoring entity, and it is an IGO like hte UNHCR or World Bank
# distinct authoring entities that are only an IGO
ihsn_clean |> select(authoring_entity) |> distinct() |>
filter(!str_detect(authoring_entity, ",")
& str_detect(authoring_entity, "UN|United Nations|FAO|World Bank"))
# number of rows
ihsn_clean |> filter(!str_detect(authoring_entity, ",")
& str_detect(authoring_entity, "UN|United Nations|FAO|World Bank")) |>
nrow()
lsms_clean |> filter(!str_detect(authoring_entity, ",")
& str_detect(authoring_entity, "UN|United Nations|FAO|World Bank")) |>
nrow()
### Looking at how many rows have only one authoring entity, and it is an IGO like hte UNHCR or World Bank
# distinct authoring entities that are only an IGO
lsms_clean |> select(authoring_entity) |> distinct() |>
filter(!str_detect(authoring_entity, ",")) |> View()
lfs_clean
lfs_clean |> select(instrument_name, instrument_type, status) |> distinct()
agri_survey_clean
names(agri_survey_clean)
agri_survey_clean |> select(instrument_name, instrument_type, status) |> distinct()
agri_survey_clean |> select(instrument_type, status) |> distinct()
agri_survey_clean |> select(instrument_type, status, study_type) |> distinct()
agri_survey_clean |> select(instrument_type, status, source) |> distinct()
agri_survey_clean |> select(study_type) |> distinct()
agri_survey_clean |> select(study_type) |> filter(!is.na(study_type)) |> distinct()
agri_survey_clean |> select(instrument_name)|> distinct()
agri_survey_clean |> select(instrument_name)|> distinct() |> View()
View(agri_survey_clean)
View(ag_census_clean)
ag_census_clean |> select(instrument_name, instrument_type, status) |> distinct()
ag_census_clean |> group_by(census_round) |> summarise(n())
tus_clean
tus_clean |> select(instrument_type, status) |> distinct()
View(census_clean)
census_clean |> select(status, instrument_name, instrument_type) |> distinct()
census_clean |> filter(status=="Planned")
census_clean |> filter(status=="Planned") |> select(year) |> distinct()
census_clean |> group_by(census_round) |> summarise(n())
ihsn_clean
View(ihsn_clean)
ihsn_clean |> select(study_type, status) |> distinct()
ihsn_clean |> select(status) |> distinct()
ihsn_clean |> select(type) |> distinct()
ihsn_clean |> select(repositoryid) |> distinct()
ihsn_clean |> select(study_type) |> distinct()
ihsn_clean |> select(repositoryid) |> distinct() |> pull()
ihsn_clean |> select(study_type) |> distinct() |> View()
library(httr)
library(jsonlite)
library(tidyverse)
# Download raw file, convert to tibble, and restrict to relevant variables
mics_raw <- fromJSON(content(GET("https://mics.unicef.org/api/survey"), "text"), flatten = TRUE) %>%
as_tibble() |>
select(country_in_filter, country, year, status, notes = round)
# Create clean dataframe
mics <- mics_raw %>%
# Drop Federal Republic of Yugoslavia, which was a union between
# present-day Serbia and Montenegro. Duplicate these rows and assign to either country
filter(!str_detect(country, "Yugoslavia")) %>%
bind_rows(mics_raw %>%
filter(str_detect(country, "Yugoslavia")) %>%
uncount(2, .id = "id") %>%
mutate(country = case_when(
id == 1 ~ "Serbia",
TRUE ~ "Montenegro"),
country_in_filter = country) %>%
select(-id)) %>%
# Correct country variable names where country_in_filter clash but it's actually
# a national survey
mutate(country = case_when(
str_detect(country, "Six Cycles") ~ "Nepal",
str_detect(country, "including current South Sudan") ~ "Sudan",
TRUE ~ country)) %>%
# Filter where agreement between country_in_filter and country that
# this was a national survey, which is what we want.
filter(country_in_filter == country) %>%
# Additional cleaning, creating necessary identifiers
mutate(
iso3c = countrycode::countrycode(country, "country.name", "iso3c"),
iso3c = case_when(
str_detect(country, "Kosovo") ~ "XKX",
TRUE ~ iso3c
),
# Create clean country column
country_clean = countrycode::countrycode(iso3c, "iso3c", "country.name"),
country_clean = case_when(iso3c == "XKX" ~ "Kosovo", TRUE ~ country_clean),
# Clean years, keeping last year. in case of survey like 2015-2016, keep 2016
year = as.numeric(case_when(
str_detect(year, "-") ~ str_extract(year, "(?<=-)[0-9]{4}"),
TRUE ~ year
)),
source = "https://mics.unicef.org/surveys", instrument_name = "MICS",
instrument_type = "Household health survey") %>%
select(country = country_clean, iso3c, year, status, instrument_name, instrument_type, source, country_original = country, notes)
# filter to OGDI years only
mics_clean <- mics |> filter(year>=2013 & year<=2022)
# export filtered and full datasets
xlsx::write.xlsx(mics_clean, "Output/mics_ogdi_yrs.xlsx")
xlsx::write.xlsx(mics, "Output/mics_all_yrs.xlsx")
# scrape data
dhs_raw <- fromJSON(content(GET("https://api.dhsprogram.com/rest/dhs/surveys?surveyStatus=all"), "text"))$Data %>%
as_tibble()
# clean data
dhs <- dhs_raw |>
add_row(SurveyType = "DHS", SurveyYearLabel = "2023", SurveyYear = "2023", DHS_CountryCode = "ZM",
CountryName = "Zambia", SubregionName = "Eastern Africa", SurveyStatus = "Ongoing", RegionName = "Sub-Saharan Africa") %>%
janitor::clean_names() %>%
# Filtering out Other surveys, Service Provision Assessments (SPA) and Special DHS, as the latter is mostly conducted at the sub-national level
# Assessed 35 other surveys, of which 10 were from after 2010 and were deemed gender-relevant and without double-counting MICS, for example.
filter(survey_type %in% c("AIS", "DHS", "MIS") | (survey_type == "OTH" & survey_id %in% c("AF2010OTH","EG2015OTH","GH2017OTH","GN2016OTH","HT2013OTH",
"ID2012OTH","ID2017OTH","ML2010OTH","PK2019OTH","RW2011OTH"))) %>%
rename(country = country_name,
year = survey_year,
status = survey_status) |>
mutate(instrument_type = "Household health survey",
source = "https://dhsprogram.com/Methodology/survey-search.cfm?pgtype=main&SrvyTp=year#",
iso3c = countrycode::countrycode(country, "country.name", "iso3c"),
year = as.numeric(year),
country_clean = countrycode::countrycode(iso3c, "iso3c", "country.name")) %>%
rename(country = country_clean,
country_original = country)
View(dhs)
dhs |> names()
fromJSON(content(GET("https://www.ilo.org/surveyLib/index.php/api/catalog/search",
query=list(from=2012, ps=10000)), "text"))$result$rows |>
as_tibble() |>
# filter for only LFS and 2012/13-present
filter(repo_title=="Labour force surveys" & year_end >= 2013) |>
rename(country = nation,
instrument_type = repo_title,
instrument_name = title,
source = url) |>
# add country code var, clean up parsing issues with accents
mutate(status = "Completed",
year = ifelse(year_start==year_end, year_end, paste0(year_start, "-", year_end)),
country = ifelse(country=="TÃ¼rkiye", "Turkey", country),
country = ifelse(country=="CÃ´te d'Ivoire", "Côte d'Ivoire", country),
iso3c = countrycode::countrycode(country, "country.name", "iso3c"),
iso3c = case_when(country == "Kosovo" ~ "XKX", country == "Netherlands Antilles" ~ "ANT", TRUE ~ iso3c))
fromJSON(content(GET("https://www.ilo.org/surveyLib/index.php/api/catalog/search",
query=list(ps=10000)), "text"))$result$rows |>
as_tibble()
fromJSON(content(GET("https://www.ilo.org/surveyLib/index.php/api/catalog/search",
query=list(ps=10000)), "text"))$result$rows |>
as_tibble() |>
# filter for only LFS
filter(repo_title=="Labour force surveys") |>
rename(country = nation,
instrument_type = repo_title,
instrument_name = title,
source = url) |>
# add country code var, clean up parsing issues with accents
mutate(status = "Completed",
year = ifelse(year_start==year_end, year_end, paste0(year_start, "-", year_end)),
country = ifelse(country=="TÃ¼rkiye", "Turkey", country),
country = ifelse(country=="CÃ´te d'Ivoire", "Côte d'Ivoire", country),
iso3c = countrycode::countrycode(country, "country.name", "iso3c"),
iso3c = case_when(country == "Kosovo" ~ "XKX", country == "Netherlands Antilles" ~ "ANT", TRUE ~ iso3c)) |> View()
# scrape data from API
lfs <- fromJSON(content(GET("https://www.ilo.org/surveyLib/index.php/api/catalog/search",
query=list(ps=10000)), "text"))$result$rows |>
as_tibble() |>
# filter for only LFS
filter(repo_title=="Labour force surveys") |>
rename(country = nation,
instrument_type = repo_title,
instrument_name = title,
source = url) |>
# add country code var, clean up parsing issues with accents
mutate(status = "Completed",
year = ifelse(year_start==year_end, year_end, paste0(year_start, "-", year_end)),
country = ifelse(country=="TÃ¼rkiye", "Turkey", country),
country = ifelse(country=="CÃ´te d'Ivoire", "Côte d'Ivoire", country),
iso3c = countrycode::countrycode(country, "country.name", "iso3c"),
iso3c = case_when(country == "Kosovo" ~ "XKX", country == "Netherlands Antilles" ~ "ANT", TRUE ~ iso3c)) |>
select(country, iso3c, year, instrument_name, instrument_type, authoring_entity, status, source, id, type, idno)
# scrape data from API
lfs <- fromJSON(content(GET("https://www.ilo.org/surveyLib/index.php/api/catalog/search",
query=list(ps=10000)), "text"))$result$rows |>
as_tibble() |>
# filter for only LFS
filter(repo_title=="Labour force surveys") |>
rename(country = nation,
instrument_type = repo_title,
instrument_name = title,
source = url) |>
# add country code var, clean up parsing issues with accents
mutate(status = "Completed",
year = ifelse(year_start==year_end, year_end, paste0(year_start, "-", year_end)),
country = ifelse(country=="TÃ¼rkiye", "Turkey", country),
country = ifelse(country=="CÃ´te d'Ivoire", "Côte d'Ivoire", country),
iso3c = countrycode::countrycode(country, "country.name", "iso3c"),
iso3c = case_when(country == "Kosovo" ~ "XKX", country == "Netherlands Antilles" ~ "ANT", TRUE ~ iso3c)) |>
select(country, iso3c, year_end, year, instrument_name, instrument_type, authoring_entity, status, source, id, type, idno)
# filter for OGDI years of interest based on year end, drop year end variable
lfs_clean <- lfs |> filter(year_end >= 2013) |> select(-year_end)
View(lfs_clean)
# scrape data from API
lfs <- fromJSON(content(GET("https://www.ilo.org/surveyLib/index.php/api/catalog/search",
query=list(ps=10000)), "text"))$result$rows |>
as_tibble() |>
# filter for only LFS
filter(repo_title=="Labour force surveys") |>
rename(country = nation,
instrument_type = repo_title,
instrument_name = title,
source = url) |>
# add country code var, clean up parsing issues with accents
mutate(status = "Completed",
year = ifelse(year_start==year_end, year_end, paste0(year_start, "-", year_end)),
country = ifelse(country=="TÃ¼rkiye", "Turkey", country),
country = ifelse(country=="CÃ´te d'Ivoire", "Côte d'Ivoire", country),
iso3c = countrycode::countrycode(country, "country.name", "iso3c"),
iso3c = case_when(country == "Kosovo" ~ "XKX", country == "Netherlands Antilles" ~ "ANT", TRUE ~ iso3c)) |>
select(country, iso3c, year_start, year_end, year, instrument_name, instrument_type, authoring_entity, status, source, id, type, idno)
# filter for OGDI years of interest based on year end, drop year end variable
lfs_clean <- lfs |> filter(year_end >= 2013)
lfs |> filter(year_start!=year_end)
# filter for OGDI years of interest based on year end
lfs_clean <- lfs |> filter(year_end >= 2013)
# export filtered and full datasets
xlsx::write.xlsx(lfs_clean, "Output/lfs_ogdi_yrs.xlsx")
xlsx::write.xlsx(lfs, "Output/lfs_all_yrs.xlsx")
xlsx::write.xlsx(lfs, "Output/lfs.xlsx")
tus <- read_csv("Input/time_use_surveys_sgdf_inventory_2020.csv") %>%
janitor::clean_names()
tus_new <- read_csv("Input/tus_unsd_data.csv", show_col_types = F)
View(tus)
dhs |> select(indicator_data) |> distinct()
# select only core variables of interest
dhs <- dhs |> select(country = country_clean, iso3c, year, status, instrument_name = survey_type, instrument_type, source, country_original = country)
# scrape data
dhs_raw <- fromJSON(content(GET("https://api.dhsprogram.com/rest/dhs/surveys?surveyStatus=all"), "text"))$Data %>%
as_tibble()
# clean data
dhs <- dhs_raw |>
add_row(SurveyType = "DHS", SurveyYearLabel = "2023", SurveyYear = "2023", DHS_CountryCode = "ZM",
CountryName = "Zambia", SubregionName = "Eastern Africa", SurveyStatus = "Ongoing", RegionName = "Sub-Saharan Africa") %>%
janitor::clean_names() %>%
# Filtering out Other surveys, Service Provision Assessments (SPA) and Special DHS, as the latter is mostly conducted at the sub-national level
# Assessed 35 other surveys, of which 10 were from after 2010 and were deemed gender-relevant and without double-counting MICS, for example.
filter(survey_type %in% c("AIS", "DHS", "MIS") | (survey_type == "OTH" & survey_id %in% c("AF2010OTH","EG2015OTH","GH2017OTH","GN2016OTH","HT2013OTH",
"ID2012OTH","ID2017OTH","ML2010OTH","PK2019OTH","RW2011OTH"))) %>%
rename(country = country_name,
year = survey_year,
status = survey_status) |>
mutate(instrument_type = "Household health survey",
source = "https://dhsprogram.com/Methodology/survey-search.cfm?pgtype=main&SrvyTp=year#",
iso3c = countrycode::countrycode(country, "country.name", "iso3c"),
year = as.numeric(year),
country_clean = countrycode::countrycode(iso3c, "iso3c", "country.name")) %>%
rename(country = country_clean,
country_original = country)
# select only core variables of interest
dhs <- dhs |> select(country = country_clean, iso3c, year, status, instrument_name = survey_type, instrument_type, source, country_original = country)
# clean data
dhs <- dhs_raw |>
add_row(SurveyType = "DHS", SurveyYearLabel = "2023", SurveyYear = "2023", DHS_CountryCode = "ZM",
CountryName = "Zambia", SubregionName = "Eastern Africa", SurveyStatus = "Ongoing", RegionName = "Sub-Saharan Africa") %>%
janitor::clean_names() %>%
# Filtering out Other surveys, Service Provision Assessments (SPA) and Special DHS, as the latter is mostly conducted at the sub-national level
# Assessed 35 other surveys, of which 10 were from after 2010 and were deemed gender-relevant and without double-counting MICS, for example.
filter(survey_type %in% c("AIS", "DHS", "MIS") | (survey_type == "OTH" & survey_id %in% c("AF2010OTH","EG2015OTH","GH2017OTH","GN2016OTH","HT2013OTH",
"ID2012OTH","ID2017OTH","ML2010OTH","PK2019OTH","RW2011OTH"))) %>%
rename(country = country_name,
year = survey_year,
status = survey_status) |>
mutate(instrument_type = "Household health survey",
source = "https://dhsprogram.com/Methodology/survey-search.cfm?pgtype=main&SrvyTp=year#",
iso3c = countrycode::countrycode(country, "country.name", "iso3c"),
year = as.numeric(year),
country_clean = countrycode::countrycode(iso3c, "iso3c", "country.name")) |>
select(country = country_clean, iso3c, year, status, instrument_name = survey_type, instrument_type, source, country_original = country)
# export filtered and full datasets
#xlsx::write.xlsx(dhs_clean, "Output/dhs_ogdi_yrs.xlsx")
xlsx::write.xlsx(dhs, "Output/dhs.xlsx")
tua
tus
tus |> filter(time_use_survey!="N/A")
View(tus_new)
tus |> filter(!str_detect(time_use_survey, "N/A"))
tus |> filter(!str_detect(time_use_survey, "N/A"))
tus |> filter(!str_detect(time_use_survey, "N/A")) |> arrange(country)
##### OLD TUS DATA #####
# https://unstats.un.org/unsd/gender/timeuse and manual ODW check of NSO websites
tus <- read_csv("Input/time_use_surveys_sgdf_inventory_2020.csv") %>%
janitor::clean_names() %>%
# Clean year column
separate(tus_years_available, into = c("year1", "year2"), sep = ", ") %>%
mutate(year1 = case_when(
year1 == "N/A" ~ NA_character_,
str_detect(year1, "/") ~ str_extract(year1, "(?<=/)[0-9]{4}"),
TRUE ~ year1
),
across(year1:year2, as.numeric),
# Create other category variables
instrument_type = "Time Use Survey", source = "https://unstats.un.org/unsd/gender/timeuse and manual ODW check of NSO websites",
status = "Completed") %>%
# Convert to longer for few countries with more than 1 obs and then drop missing obs
pivot_longer(year1:year2, names_to = "indicator", values_to = "year") %>%
filter(!is.na(year)) %>%
select(country, iso3c = iso, year, instrument_name = time_use_survey,
instrument_type, source, status)
read_csv("Input/tus_unsd_data.csv", show_col_types = F) |>
rename(country = Country,
survey_avail = `Survey Availability`,
survey_year = `Year of the survey`) |>
mutate(instrument_type = "Time Use Survey",
source = "https://unstats.un.org/unsd/demographic-social/time-use/",
status = "Completed")
read_csv("Input/tus_unsd_data.csv", show_col_types = F) |>
rename(country = Country,
survey_avail = `Survey Availability`,
survey_year = `Year of the survey`) |>
mutate(instrument_type = "Time Use Survey",
source = "https://unstats.un.org/unsd/demographic-social/time-use/",
status = "Completed") |>
filter(str_detect(survey_year, "201|202"))
read_csv("Input/tus_unsd_data.csv", show_col_types = F) |>
rename(country = Country,
survey_avail = `Survey Availability`,
survey_year = `Year of the survey`) |>
mutate(instrument_type = "Time Use Survey",
source = "https://unstats.un.org/unsd/demographic-social/time-use/",
status = "Completed") |>
filter(str_detect(survey_year, "201|202")) |>
arrange(country)
read_csv("Input/tus_unsd_data.csv", show_col_types = F) |>
rename(country = Country,
survey_avail = `Survey Availability`,
survey_year = `Year of the survey`) |>
mutate(instrument_type = "Time Use Survey",
source = "https://unstats.un.org/unsd/demographic-social/time-use/",
status = "Completed") |>
filter(str_detect(survey_year, "201[2-9]|202")) |>
arrange(country)
read_csv("Input/tus_unsd_data.csv", show_col_types = F) |>
rename(country = Country,
survey_avail = `Survey Availability`,
survey_year = `Year of the survey`) |>
mutate(instrument_type = "Time Use Survey",
source = "https://unstats.un.org/unsd/demographic-social/time-use/",
status = "Completed") |>
filter(str_detect(survey_year, "201[2-9]|202")) |>
arrange(country) |> View()
read_csv("Input/tus_unsd_data.csv", show_col_types = F) |>
rename(country = Country,
survey_avail = `Survey Availability`,
survey_year = `Year of the survey`) |>
mutate(instrument_type = "Time Use Survey",
source = "https://unstats.un.org/unsd/demographic-social/time-use/",
status = "Completed") |>
filter(str_detect(survey_year, "201[3-9]|202") | str_detect(survey_year, "2012-13"))
# data from https://unstats.un.org/unsd/demographic-social/time-use/
tus_new <- read_csv("Input/tus_unsd_data.csv", show_col_types = F) |>
rename(country = Country,
survey_avail = `Survey Availability`,
survey_year = `Year of the survey`) |>
mutate(instrument_type = "Time Use Survey",
source = "https://unstats.un.org/unsd/demographic-social/time-use/",
status = "Completed") |>
filter(str_detect(survey_year, "201[3-9]|202") | str_detect(survey_year, "2012-13"))
# look at overlap by year and country
tus_new
# look at overlap by year and country
tus
# look at overlap by country
tus_new |> filter(country %in% tus$country)
tus |> filter(country %in% tus_new$country)
# original TUS data
# https://unstats.un.org/unsd/gender/timeuse and manual ODW check of NSO websites
tus <- read_csv("Input/time_use_surveys_sgdf_inventory_2020.csv") %>%
janitor::clean_names() %>%
# Clean year column
separate(tus_years_available, into = c("year1", "year2"), sep = ", ") %>%
mutate(year1 = case_when(
year1 == "N/A" ~ NA_character_,
str_detect(year1, "/") ~ str_extract(year1, "(?<=/)[0-9]{4}"),
TRUE ~ year1
),
across(year1:year2, as.numeric),
# Create other category variables
instrument_type = "Time Use Survey", source = "https://unstats.un.org/unsd/gender/timeuse and manual ODW check of NSO websites",
status = "Completed") %>%
# Convert to longer for few countries with more than 1 obs and then drop missing obs
pivot_longer(year1:year2, names_to = "indicator", values_to = "year") %>%
filter(!is.na(year)) %>%
select(country, iso3c = iso, year, instrument_name = time_use_survey,
instrument_type, source, status) |>
filter(year >= 2013)
# look at overlap by country
tus_new |> filter(country %in% tus$country)
read_csv("Input/time_use_surveys_sgdf_inventory_2020.csv") %>%
janitor::clean_names()
read_csv("Input/time_use_surveys_sgdf_inventory_2020.csv") %>%
janitor::clean_names() |> filter(country=="Ethiopia")
